{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Machine Learning Project"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Ames Data Cleaning and Standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import preprocessing\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import Ridge, Lasso, ElasticNet, LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "kaggle_train_raw = pd.read_csv('../../NYCDSA/Project 3 - Machine Learning/data/train.csv', index_col=0)\n",
    "kaggle_test_raw = pd.read_csv('../../NYCDSA/Project 3 - Machine Learning/data/test.csv', index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.options.display.max_columns = 300"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Backup so we can always start over"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "kr_train = kaggle_train_raw.copy()\n",
    "kr_test = kaggle_test_raw.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove spaces so column names are easier to work with"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "kr_train.columns = kr_train.columns.str.replace(\" \", \"_\")\n",
    "kr_test.columns = kr_test.columns.str.replace(\" \", \"_\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Impute all missing data so no NaN valus remain"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "kr_train['PoolQC'] = kr_train['PoolQC'].replace(np.nan, 'NA')\n",
    "kr_train['Alley'] = kr_train['Alley'].replace(np.nan, 'NA')\n",
    "kr_train['Fence'] = kr_train['Fence'].replace(np.nan, 'NA')\n",
    "kr_train['FireplaceQu'] = kr_train['FireplaceQu'].replace(np.nan, 'NA')\n",
    "kr_train['GarageFinish'] = kr_train['GarageFinish'].replace(np.nan, 'NA')\n",
    "kr_train['GarageType'] = kr_train['GarageType'].replace(np.nan, 'NA')\n",
    "kr_train['GarageQual'] = kr_train['GarageQual'].replace(np.nan, 'NA')\n",
    "kr_train['GarageCond'] = kr_train['GarageCond'].replace(np.nan, 'NA')\n",
    "kr_train['GarageCars'] = kr_train['GarageCars'].replace(np.nan, 0)\n",
    "kr_train['GarageArea'] = kr_train['GarageArea'].replace(np.nan, 0)\n",
    "kr_train['BsmtExposure'] = kr_train['BsmtExposure'].replace(np.nan, 'NA')\n",
    "kr_train['BsmtFinType2'] = kr_train['BsmtFinType2'].replace(np.nan, 'NA')\n",
    "kr_train['BsmtCond'] = kr_train['BsmtCond'].replace(np.nan, 'NA')\n",
    "kr_train['BsmtQual'] = kr_train['BsmtQual'].replace(np.nan, 'NA')\n",
    "kr_train['BsmtFinType1'] = kr_train['BsmtFinType1'].replace(np.nan, 'NA')\n",
    "kr_train['BsmtFullBath'] = kr_train['BsmtFullBath'].replace(np.nan, 0)\n",
    "kr_train['BsmtHalfBath'] = kr_train['BsmtHalfBath'].replace(np.nan, 0)\n",
    "kr_train['TotalBsmtSF'] = kr_train['TotalBsmtSF'].replace(np.nan, 0)\n",
    "kr_train['BsmtFinSF2'] = kr_train['BsmtFinSF2'].replace(np.nan, 0)\n",
    "kr_train['BsmtUnfSF'] = kr_train['BsmtUnfSF'].replace(np.nan, 0)\n",
    "kr_train['BsmtFinSF1'] = kr_train['BsmtFinSF1'].replace(np.nan, 0)\n",
    "kr_train['MiscFeature'] = kr_train['MiscFeature'].replace(np.nan, 'NA')\n",
    "kr_train['MasVnrArea'] = kr_train['MasVnrArea'].replace(np.nan, 0)\n",
    "kr_train['MasVnrType'] = kr_train['MasVnrType'].replace(np.nan, 'None')\n",
    "kr_train['Electrical'] = kr_train['Electrical'].replace(np.nan, 'SBrkr')\n",
    "\n",
    "kr_test['PoolQC'] = kr_test['PoolQC'].replace(np.nan, 'NA')\n",
    "kr_test['Alley'] = kr_test['Alley'].replace(np.nan, 'NA')\n",
    "kr_test['Fence'] = kr_test['Fence'].replace(np.nan, 'NA')\n",
    "kr_test['FireplaceQu'] = kr_test['FireplaceQu'].replace(np.nan, 'NA')\n",
    "kr_test['GarageFinish'] = kr_test['GarageFinish'].replace(np.nan, 'NA')\n",
    "kr_test['GarageType'] = kr_test['GarageType'].replace(np.nan, 'NA')\n",
    "kr_test['GarageQual'] = kr_test['GarageQual'].replace(np.nan, 'NA')\n",
    "kr_test['GarageCond'] = kr_test['GarageCond'].replace(np.nan, 'NA')\n",
    "kr_test['GarageCars'] = kr_test['GarageCars'].replace(np.nan, 0)\n",
    "kr_test['GarageArea'] = kr_test['GarageArea'].replace(np.nan, 0)\n",
    "kr_test['BsmtExposure'] = kr_test['BsmtExposure'].replace(np.nan, 'NA')\n",
    "kr_test['BsmtFinType2'] = kr_test['BsmtFinType2'].replace(np.nan, 'NA')\n",
    "kr_test['BsmtCond'] = kr_test['BsmtCond'].replace(np.nan, 'NA')\n",
    "kr_test['BsmtQual'] = kr_test['BsmtQual'].replace(np.nan, 'NA')\n",
    "kr_test['BsmtFinType1'] = kr_test['BsmtFinType1'].replace(np.nan, 'NA')\n",
    "kr_test['BsmtFullBath'] = kr_test['BsmtFullBath'].replace(np.nan, 0)\n",
    "kr_test['BsmtHalfBath'] = kr_test['BsmtHalfBath'].replace(np.nan, 0)\n",
    "kr_test['TotalBsmtSF'] = kr_test['TotalBsmtSF'].replace(np.nan, 0)\n",
    "kr_test['BsmtFinSF2'] = kr_test['BsmtFinSF2'].replace(np.nan, 0)\n",
    "kr_test['BsmtUnfSF'] = kr_test['BsmtUnfSF'].replace(np.nan, 0)\n",
    "kr_test['BsmtFinSF1'] = kr_test['BsmtFinSF1'].replace(np.nan, 0)\n",
    "kr_test['MiscFeature'] = kr_test['MiscFeature'].replace(np.nan, 'NA')\n",
    "kr_test['MasVnrArea'] = kr_test['MasVnrArea'].replace(np.nan, 0)\n",
    "kr_test['MasVnrType'] = kr_test['MasVnrType'].replace(np.nan, 'None')\n",
    "kr_test['Electrical'] = kr_test['Electrical'].replace(np.nan, 'SBrkr')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "kr_train['LotFrontage'].value_counts()\n",
    "kr_train[['LotConfig', 'LotFrontage']].drop_duplicates()\n",
    "kr_train[kr_train['LotFrontage'].isnull()][['LotConfig', 'LotFrontage', 'LotShape']].drop_duplicates()\n",
    "kr_train.groupby(['LotConfig', 'LotShape'])['LotFrontage'].agg(['count', 'mean', 'min', 'max'])\n",
    "lot_dict = kr_train.groupby(['LotConfig', 'LotShape'])['LotFrontage'].agg(['mean']).to_dict()['mean']\n",
    "impute_index = kr_train['LotFrontage'].isnull()\n",
    "kr_train.loc[impute_index, 'LotFrontage'] = kr_train[impute_index].apply(lambda x:lot_dict[(x['LotConfig'], x['LotShape'])], axis=1)\n",
    "\n",
    "kr_test['LotFrontage'].value_counts()\n",
    "kr_test[['LotConfig', 'LotFrontage']].drop_duplicates()\n",
    "kr_test[kr_test['LotFrontage'].isnull()][['LotConfig', 'LotFrontage', 'LotShape']].drop_duplicates()\n",
    "kr_test.groupby(['LotConfig', 'LotShape'])['LotFrontage'].agg(['count', 'mean', 'min', 'max'])\n",
    "lot_dict = kr_test.groupby(['LotConfig', 'LotShape'])['LotFrontage'].agg(['mean']).to_dict()['mean']\n",
    "impute_index = kr_test['LotFrontage'].isnull()\n",
    "kr_test.loc[impute_index, 'LotFrontage'] = kr_test[impute_index].apply(lambda x:lot_dict[(x['LotConfig'], x['LotShape'])], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "kr_train['HasGarage'] = 0\n",
    "kr_train.loc[~kr_train['GarageYrBlt'].isnull(), 'HasGarage'] = 1\n",
    "kr_train['GarageYrBlt'] = kr_train['GarageYrBlt'].replace(np.nan, kr_train['GarageYrBlt'].min() - 1)\n",
    "min_max_scaler = preprocessing.MinMaxScaler()\n",
    "kr_train['GarageYrBlt'] = min_max_scaler.fit_transform(kr_train[['GarageYrBlt']])\n",
    "\n",
    "kr_test['HasGarage'] = 0\n",
    "kr_test.loc[~kr_test['GarageYrBlt'].isnull(), 'HasGarage'] = 1\n",
    "kr_test['GarageYrBlt'] = kr_test['GarageYrBlt'].replace(np.nan, kr_test['GarageYrBlt'].min() - 1)\n",
    "min_max_scaler = preprocessing.MinMaxScaler()\n",
    "kr_test['GarageYrBlt'] = min_max_scaler.fit_transform(kr_test[['GarageYrBlt']])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "lfa = kr_train[kr_train['LotShape'] == 'Reg']['LotFrontage'].agg(['mean'])\n",
    "\n",
    "kr_train['LotFrontage'] = kr_train['LotFrontage'].replace(np.nan, lfa[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "kr_test.loc[(kr_test['MSZoning'].isnull()) & (kr_test['Neighborhood'] ==  'Mitchel'), 'MSZoning'] = str(pd.DataFrame(kr_test[kr_test['Neighborhood'] == 'Mitchel']['MSZoning'].value_counts()).index[0])\n",
    "kr_test.loc[(kr_test['MSZoning'].isnull()) & (kr_test['Neighborhood'] ==  'IDOTRR'), 'MSZoning'] = str(pd.DataFrame(kr_test[kr_test['Neighborhood'] == 'IDOTRR']['MSZoning'].value_counts()).index[0])\n",
    "\n",
    "ir_lf = kr_test[kr_test['LotShape'] == 'IR2']['LotFrontage'].agg('mean')\n",
    "kr_test['LotFrontage'] = kr_test['LotFrontage'].replace(np.nan, ir_lf)\n",
    "\n",
    "kr_test['Utilities'] = kr_test['Utilities'].replace(np.nan, 'AllPub')\n",
    "\n",
    "kr_test['Exterior1st'] = kr_test['Exterior1st'].replace(np.nan, 'VinylSd')\n",
    "kr_test['Exterior2nd'] = kr_test['Exterior2nd'].replace(np.nan, 'VinylSd')\n",
    "\n",
    "kr_test[kr_test['KitchenQual'].isnull()]\n",
    "kr_test.groupby(['BldgType', 'HouseStyle'])['Exterior1st'].agg(['count'])\n",
    "kr_test[(kr_test['Exterior1st'] == 'VinylSd') & (kr_test['Exterior2nd'] == 'VinylSd')]\n",
    "kr_test['KitchenQual'].value_counts()\n",
    "\n",
    "kr_test['KitchenQual'] = kr_test['KitchenQual'].replace(np.nan, 'TA')\n",
    "\n",
    "kr_test['Functional'] = kr_test['Functional'].replace(np.nan, 'Typ')\n",
    "\n",
    "kr_test['SaleType'] = kr_test['SaleType'].replace(np.nan, 'WD')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# kr_train = kr_train.loc[kr_train.isna().any(axis=1)]\n",
    "\n",
    "# np.any(np.isnan(kr_train))\n",
    "# np.all(np.isfinite(kr_train))\n",
    "\n",
    "for feature in kr_test:\n",
    "    if kr_test[feature].isna().sum() > 0:\n",
    "        print( f' {feature} has {kr_test[feature].isna().sum()} missing values' )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove outliers and other records that won't be relevant to our goal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "kr_train_trimmed = kr_train.copy()\n",
    "kr_test_trimmed = kr_test.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Encoding"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "General Ordinal function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "def condition_quality_ordinals(df, col_list):\n",
    "    for col in col_list:\n",
    "        df[col] = df[col].map({'NA' : 0.0, 'Po' : 1.0, 'Fa' : 4.0, 'TA' : 9.0, 'Gd' : 16.0, 'Ex' : 25.0})\n",
    "        df[col] = pd.to_numeric(df[col])\n",
    "        df[col] = df[col].fillna(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "ames_encoded = kr_train_trimmed.copy()\n",
    "ames_encoded_test = kr_test_trimmed.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Garage Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "condition_quality_ordinals(ames_encoded, ['GarageCond', 'GarageQual'])\n",
    "\n",
    "dummy = pd.get_dummies(ames_encoded['GarageType'], prefix='GarageType')\n",
    "dummy.drop('GarageType_Attchd', axis=1, inplace=True)\n",
    "ames_encoded = ames_encoded.drop('GarageType', axis=1)\n",
    "ames_encoded = pd.concat([ames_encoded, dummy], axis=1)\n",
    "\n",
    "ames_encoded['GarageFinish'] = ames_encoded['GarageFinish'].map({'NA' : 0.0, 'Unf' : 1.0, 'RFn' : 2.0, 'Fin' : 3.0})\n",
    "ames_encoded['GarageFinish'] = pd.to_numeric(ames_encoded['GarageFinish'])\n",
    "ames_encoded['GarageFinish'] = ames_encoded['GarageFinish'].fillna(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "condition_quality_ordinals(ames_encoded_test, ['GarageCond', 'GarageQual'])\n",
    "\n",
    "dummy = pd.get_dummies(ames_encoded_test['GarageType'], prefix='GarageType')\n",
    "dummy.drop('GarageType_Attchd', axis=1, inplace=True)\n",
    "ames_encoded_test = ames_encoded_test.drop('GarageType', axis=1)\n",
    "ames_encoded_test = pd.concat([ames_encoded_test, dummy], axis=1)\n",
    "\n",
    "ames_encoded_test['GarageFinish'] = ames_encoded_test['GarageFinish'].map({'NA' : 0.0, 'Unf' : 1.0, 'RFn' : 2.0, 'Fin' : 3.0})\n",
    "ames_encoded_test['GarageFinish'] = pd.to_numeric(ames_encoded_test['GarageFinish'])\n",
    "ames_encoded_test['GarageFinish'] = ames_encoded_test['GarageFinish'].fillna(0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Basement Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "condition_quality_ordinals(ames_encoded, ['BsmtCond', 'BsmtQual'])\n",
    "\n",
    "ames_encoded['BsmtExposure'] = ames_encoded['BsmtExposure'].map({'NA' : 0.0, 'No' : 1.0, 'Mn' : 2.0, 'Av' : 3.0, 'Gd' : 4.0})\n",
    "ames_encoded['BsmtExposure'] = pd.to_numeric(ames_encoded['BsmtExposure'])\n",
    "\n",
    "ames_encoded['BsmtFinType1'] = ames_encoded['BsmtFinType1'].map({'NA' : 0.0, 'Unf' : 1.0, 'LwQ' : 2.0, 'Rec' : 3.0, 'BLQ' : 4.0, 'ALQ' : 5.0, 'GLQ' : 6.0})\n",
    "ames_encoded['BsmtFinType1'] = pd.to_numeric(ames_encoded['BsmtFinType1'])\n",
    "\n",
    "ames_encoded['BsmtFinType2'] = ames_encoded['BsmtFinType2'].map({'NA' : 0.0, 'Unf' : 1.0, 'LwQ' : 2.0, 'Rec' : 3.0, 'BLQ' : 4.0, 'ALQ' : 5.0, 'GLQ' : 6.0})\n",
    "ames_encoded['BsmtFinType2'] = pd.to_numeric(ames_encoded['BsmtFinType2'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "condition_quality_ordinals(ames_encoded_test, ['BsmtCond', 'BsmtQual'])\n",
    "\n",
    "ames_encoded_test['BsmtExposure'] = ames_encoded_test['BsmtExposure'].map({'NA' : 0.0, 'No' : 1.0, 'Mn' : 2.0, 'Av' : 3.0, 'Gd' : 4.0})\n",
    "ames_encoded_test['BsmtExposure'] = pd.to_numeric(ames_encoded_test['BsmtExposure'])\n",
    "\n",
    "ames_encoded_test['BsmtFinType1'] = ames_encoded_test['BsmtFinType1'].map({'NA' : 0.0, 'Unf' : 1.0, 'LwQ' : 2.0, 'Rec' : 3.0, 'BLQ' : 4.0, 'ALQ' : 5.0, 'GLQ' : 6.0})\n",
    "ames_encoded_test['BsmtFinType1'] = pd.to_numeric(ames_encoded_test['BsmtFinType1'])\n",
    "\n",
    "ames_encoded_test['BsmtFinType2'] = ames_encoded_test['BsmtFinType2'].map({'NA' : 0.0, 'Unf' : 1.0, 'LwQ' : 2.0, 'Rec' : 3.0, 'BLQ' : 4.0, 'ALQ' : 5.0, 'GLQ' : 6.0})\n",
    "ames_encoded_test['BsmtFinType2'] = pd.to_numeric(ames_encoded_test['BsmtFinType2'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remaining Feature Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Try combining Condition_1 and Condition_2\n",
    "\n",
    "# ames_encoded['Conditions'] = ames_encoded['Condition1'] + '_' + ames_encoded['Condition2']\n",
    "# ames_encoded_test['Conditions'] = ames_encoded_test['Condition1'] + '_' + ames_encoded_test['Condition2']\n",
    "\n",
    "# ames_encoded.drop(['Condition1', 'Condition2'], axis=1, inplace=True)\n",
    "# ames_encoded_test.drop(['Condition1', 'Condition2'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "encode_col = ['MSZoning', 'Street', 'LotConfig', 'LandSlope', 'RoofStyle', 'Exterior1st', 'MasVnrType', 'Foundation', 'Heating', 'Electrical', 'Condition1', 'Condition2', 'BldgType', 'RoofMatl', 'Exterior2nd', 'Fence', 'MiscFeature', 'SaleType', 'SaleCondition', 'MoSold', 'YrSold', 'MSSubClass']\n",
    "for feature in encode_col:\n",
    "    most_common = str(pd.DataFrame(ames_encoded[feature].value_counts()).index[0])\n",
    "    dummy = pd.get_dummies(ames_encoded[feature], prefix=feature)\n",
    "    dummy.drop(feature+\"_\"+most_common, axis=1, inplace=True)\n",
    "    ames_encoded = ames_encoded.drop(feature, axis=1)\n",
    "    ames_encoded = pd.concat([ames_encoded, dummy], axis=1)\n",
    "    \n",
    "    dummy = pd.get_dummies(ames_encoded_test[feature], prefix=feature)\n",
    "    dummy.drop(feature+\"_\"+most_common, axis=1, inplace=True)\n",
    "    ames_encoded_test = ames_encoded_test.drop(feature, axis=1)\n",
    "    ames_encoded_test = pd.concat([ames_encoded_test, dummy], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "condition_quality_ordinals(ames_encoded, ['KitchenQual', 'FireplaceQu', 'HeatingQC', 'ExterQual', 'ExterCond', 'PoolQC'])\n",
    "\n",
    "ames_encoded['CentralAir'] = ames_encoded['CentralAir'].map({'N' : 0.0, 'Y' : 1.0})\n",
    "ames_encoded['CentralAir'] = pd.to_numeric(ames_encoded['CentralAir'])\n",
    "\n",
    "ames_encoded['Alley'] = ames_encoded['Alley'].map({'NA' : 0.0, 'Grvl' : 1.0, 'Pave' : 2.0})\n",
    "ames_encoded['Alley'] = pd.to_numeric(ames_encoded['Alley'])\n",
    "\n",
    "ames_encoded['LotShape'] = ames_encoded['LotShape'].map({'Reg' : 0.0, 'IR1' : -1.0, 'IR2' : -2.0, 'IR3' : -3.0})\n",
    "ames_encoded['LotShape'] = pd.to_numeric(ames_encoded['LotShape'])\n",
    "\n",
    "ames_encoded['LandContour'] = ames_encoded['LandContour'].map({'Lvl' : 0.0, 'Bnk' : -1.0, 'HLS' : -2.0, 'Low' : -3.0})\n",
    "ames_encoded['LandContour'] = pd.to_numeric(ames_encoded['LandContour'])\n",
    "\n",
    "ames_encoded['PavedDrive'] = ames_encoded['PavedDrive'].map({'N' : 0.0, 'P' : 1.0, 'Y' : 2.0})\n",
    "ames_encoded['PavedDrive'] = pd.to_numeric(ames_encoded['PavedDrive'])\n",
    "\n",
    "ames_encoded['Utilities'] = ames_encoded['Utilities'].map({'ELO' : 0.0, 'NoSeWa' : 1.0, 'NoSewr' : 2.0, 'AllPub' : 3.0})\n",
    "ames_encoded['Utilities'] = pd.to_numeric(ames_encoded['Utilities'])\n",
    "\n",
    "ames_encoded['Functional'] = ames_encoded['Functional'].map({'Typ' : 0.0, 'Min1' : -1.0, 'Min2' : -2.0, 'Mod' : -3.0, 'Maj1' : -4.0, 'Maj2' : -5.0, 'Sev' : -6.0, 'Sal' : -7.0})\n",
    "ames_encoded['Functional'] = pd.to_numeric(ames_encoded['Functional'])\n",
    "    \n",
    "ames_encoded['HouseStyle'] = ames_encoded['HouseStyle'].map({'1Story' : 1.0, '2Story' : 2.0, '1.5Fin' : 1.5, 'SLvl' : 1.5, 'SFoyer' : 2.0, '2.5Unf' : 2.5, '1.5Unf' : 1.5, '2.5Fin' : 2.5})\n",
    "ames_encoded.rename(columns = {'HouseStyle':'NumberStories'}, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "condition_quality_ordinals(ames_encoded_test, ['KitchenQual', 'FireplaceQu', 'HeatingQC', 'ExterQual', 'ExterCond', 'PoolQC'])\n",
    "\n",
    "ames_encoded_test['CentralAir'] = ames_encoded_test['CentralAir'].map({'N' : 0.0, 'Y' : 1.0})\n",
    "ames_encoded_test['CentralAir'] = pd.to_numeric(ames_encoded_test['CentralAir'])\n",
    "\n",
    "ames_encoded_test['Alley'] = ames_encoded_test['Alley'].map({'NA' : 0.0, 'Grvl' : 1.0, 'Pave' : 2.0})\n",
    "ames_encoded_test['Alley'] = pd.to_numeric(ames_encoded_test['Alley'])\n",
    "\n",
    "ames_encoded_test['LotShape'] = ames_encoded_test['LotShape'].map({'Reg' : 0.0, 'IR1' : -1.0, 'IR2' : -2.0, 'IR3' : -3.0})\n",
    "ames_encoded_test['LotShape'] = pd.to_numeric(ames_encoded_test['LotShape'])\n",
    "\n",
    "ames_encoded_test['LandContour'] = ames_encoded_test['LandContour'].map({'Lvl' : 0.0, 'Bnk' : -1.0, 'HLS' : -2.0, 'Low' : -3.0})\n",
    "ames_encoded_test['LandContour'] = pd.to_numeric(ames_encoded_test['LandContour'])\n",
    "\n",
    "ames_encoded_test['PavedDrive'] = ames_encoded_test['PavedDrive'].map({'N' : 0.0, 'P' : 1.0, 'Y' : 2.0})\n",
    "ames_encoded_test['PavedDrive'] = pd.to_numeric(ames_encoded_test['PavedDrive'])\n",
    "\n",
    "ames_encoded_test['Utilities'] = ames_encoded_test['Utilities'].map({'ELO' : 0.0, 'NoSeWa' : 1.0, 'NoSewr' : 2.0, 'AllPub' : 3.0})\n",
    "ames_encoded_test['Utilities'] = pd.to_numeric(ames_encoded_test['Utilities'])\n",
    "\n",
    "ames_encoded_test['Functional'] = ames_encoded_test['Functional'].map({'Typ' : 0.0, 'Min1' : -1.0, 'Min2' : -2.0, 'Mod' : -3.0, 'Maj1' : -4.0, 'Maj2' : -5.0, 'Sev' : -6.0, 'Sal' : -7.0})\n",
    "ames_encoded_test['Functional'] = pd.to_numeric(ames_encoded_test['Functional'])\n",
    "\n",
    "ames_encoded_test['HouseStyle'] = ames_encoded_test['HouseStyle'].map({'1Story' : 1.0, '2Story' : 2.0, '1.5Fin' : 1.5, 'SLvl' : 1.5, 'SFoyer' : 2.0, '2.5Unf' : 2.5, '1.5Unf' : 1.5, '2.5Fin' : 2.5})\n",
    "ames_encoded_test.rename(columns = {'HouseStyle':'NumberStories'}, inplace = True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## New Feature for Total Area\n",
    "\n",
    "Comment out to keep original separate Areas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ames_encoded['Total_Area'] = ames_encoded['Gr_Liv_Area'] + ames_encoded['Total_Bsmt_SF'] + ames_encoded['Garage_Area']\n",
    "\n",
    "# # Take the log?\n",
    "# ames_encoded['Total_Area'] = np.log(ames_encoded['Total_Area'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Boxcox Transformations "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import boxcox\n",
    "\n",
    "def boxcox_transformation(var):\n",
    "    ames_encoded[var], param = boxcox(ames_encoded[var]+1)\n",
    "    ames_encoded_test[var], param = boxcox(ames_encoded_test[var]+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "boxcox_transformation('LotArea')\n",
    "boxcox_transformation('BsmtUnfSF')\n",
    "boxcox_transformation('TotalBsmtSF')\n",
    "boxcox_transformation('1stFlrSF')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Add missing features to Test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "ft = ames_encoded.columns.isin(ames_encoded_test.columns)\n",
    "\n",
    "for column in ames_encoded.iloc[:,~ft].columns:\n",
    "    ames_encoded_test[column] = 0\n",
    "\n",
    "ames_encoded_test.drop('SalePrice', axis=1, inplace=True)\n",
    "ames_encoded_test.drop('MSSubClass_150', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Trimmed down columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ames_trimmed = Ames_train.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ames_trimmed.drop(['Sale_Type', 'Mas_Vnr_Area', 'Exter_Cond', 'Exterior_2nd', '3Ssn_Porch', 'Screen_Porch', 'Garage_Qual', 'Garage_Cond', 'Bsmt_Cond', 'BsmtFin_Type_2', 'Bsmt_Half_Bath','Alley', 'Pool_QC', 'Fence', 'Misc_Val'], axis=1, inplace=True)\n",
    "# ames_trimmed.drop('Kitchen_AbvGr', axis=1, inplace=True)\n",
    "# ames_trimmed.drop(['Bldg_Type', 'Sale_Condition'], axis=1, inplace=True)\n",
    "# ames_trimmed.drop(['Yr_Sold', 'Year_Built', 'Year_Remod/Add'], axis=1, inplace=True)\n",
    "# ames_trimmed.drop(['Condition_1', 'Condition_2'], axis=1, inplace=True)\n",
    "# ames_trimmed.drop('RoofMatl', axis=1, inplace=True)\n",
    "# ames_trimmed.drop('Misc_Feature', axis=1, inplace=True)\n",
    "# ames_trimmed.drop('PID', axis=1, inplace=True)\n",
    "# ames_trimmed.drop('Utilities', axis=1, inplace=True)\n",
    "# ames_trimmed.drop('Functional', axis=1, inplace=True)\n",
    "# ames_trimmed.drop('Paved_Drive', axis=1, inplace=True)\n",
    "# # ames_trimmed.drop(['Remodel_Bin', 'How_Old_Bin', 'Garage_Gr_Liv_Area', 'Garage_1st_Flr_SF', 'Fireplace_Story'], axis=1, inplace=True)\n",
    "# ames_trimmed.drop('MS_SubClass', axis=1, inplace=True)\n",
    "\n",
    "# ames_trimmed.drop(['BsmtFin_SF_1', '1st_Flr_SF', '2nd_Flr_SF', 'PID'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Update Test data in the same way"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ames_test.drop(['Sale_Type', 'Mas_Vnr_Area', 'Exter_Cond', 'Exterior_2nd', '3Ssn_Porch', 'Screen_Porch', 'Garage_Qual', 'Garage_Cond', 'Bsmt_Cond', 'BsmtFin_Type_2', 'Bsmt_Half_Bath','Alley', 'Pool_QC', 'Fence', 'Misc_Val'], axis=1, inplace=True)\n",
    "# Ames_test.drop('Kitchen_AbvGr', axis=1, inplace=True)\n",
    "# Ames_test.drop(['Bldg_Type', 'Sale_Condition'], axis=1, inplace=True)\n",
    "# Ames_test.drop(['Yr_Sold', 'Year_Built', 'Year_Remod/Add'], axis=1, inplace=True)\n",
    "# Ames_test.drop(['Condition_1', 'Condition_2'], axis=1, inplace=True)\n",
    "# Ames_test.drop('RoofMatl', axis=1, inplace=True)\n",
    "# Ames_test.drop('Misc_Feature', axis=1, inplace=True)\n",
    "# Ames_test.drop('PID', axis=1, inplace=True)\n",
    "# Ames_test.drop('Utilities', axis=1, inplace=True)\n",
    "# Ames_test.drop('Functional', axis=1, inplace=True)\n",
    "# Ames_test.drop('Paved_Drive', axis=1, inplace=True)\n",
    "# # Ames_test.drop(['Remodel_Bin', 'How_Old_Bin', 'Garage_Gr_Liv_Area', 'Garage_1st_Flr_SF', 'Fireplace_Story'], axis=1, inplace=True)\n",
    "# Ames_test.drop('MS_SubClass', axis=1, inplace=True)\n",
    "\n",
    "# Ames_test.drop(['BsmtFin_SF_1', '1st_Flr_SF', '2nd_Flr_SF', 'PID'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# pd.DataFrame(ames_trimmed.dtypes)[0].value_counts()\n",
    "# ames_trimmed.select_dtypes(exclude=['float', 'int', 'uint8'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ames_trimmed.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ames_engineered = ames_trimmed.copy()\n",
    "ames_engineered = ames_encoded.copy()\n",
    "ames_engineered_test = ames_encoded_test.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ames_engineered['PPSF'] = ames_engineered['SalePrice'] / ames_engineered['GrLivArea']\n",
    "\n",
    "data = pd.concat([ames_engineered.groupby('Neighborhood').mean()['PPSF']], axis = 1)\n",
    "\n",
    "f, ax = plt.subplots()\n",
    "\n",
    "sns.stripplot(data.sort_values(by='PPSF').PPSF, data.sort_values(by='PPSF').index, orient='h', color='red');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Number_of_Neighborhood_Clusters = 4\n",
    "\n",
    "# hood_means = data.sort_values(by='PPSF').PPSF\n",
    "\n",
    "# from sklearn.cluster import KMeans\n",
    "# kmeans = KMeans(n_clusters=Number_of_Neighborhood_Clusters, random_state=42).fit(hood_means.values.reshape(-1, 1))\n",
    "\n",
    "# hood_clusters = pd.concat([hood_means, pd.Series(kmeans.labels_, index=hood_means.index, name='Cluster')], axis = 1)\n",
    "\n",
    "# def neighborhood_to_cluster(neigh_string):\n",
    "#     return int(hood_clusters[ hood_clusters.index==neigh_string ]['Cluster'].values)\n",
    "\n",
    "# ames_engineered['Neighborhood'] =  ames_engineered['Neighborhood'].apply(neighborhood_to_cluster)\n",
    "\n",
    "# ppsf_dict = ames_engineered.groupby('Neighborhood_cluster')['PPSF'].agg('mean').to_dict()\n",
    "\n",
    "# ames_engineered['N_PPSF'] = ames_engineered['Neighborhood_cluster'].map(ppsf_dict)\n",
    "\n",
    "# ames_engineered['SP_Guess'] = ames_engineered['N_PPSF'] * ames_engineered['Gr_Liv_Area']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Change Neighborhood to Neighborhood_Rank\n",
    "\n",
    "ames_engineered['AvgPsqft'] = ames_engineered['Neighborhood'].map(data.to_dict()['PPSF'])\n",
    "# ames_engineered['AAvg_Psqft_Rank'] = ames_engineered['Avg_Psqft'].rank() \n",
    "\n",
    "# # high level - valuecounts by neighborhood and average price per sq ft by neighborhood\n",
    "ames_nbhood_count = pd.DataFrame(ames_engineered['Neighborhood'].value_counts()).rename(columns = {'Neighborhood' : 'NbhoodCount'})\n",
    "ames_nbhood_stat = ames_engineered.groupby('Neighborhood').agg({'GrLivArea' : 'sum', 'SalePrice' : 'sum'})\n",
    "ames_nbhood = pd.concat([ames_nbhood_count, ames_nbhood_stat], axis = 1)\n",
    "ames_nbhood['AvgPsqft'] = ames_nbhood['SalePrice'] /  ames_nbhood['GrLivArea']\n",
    "ames_nbhood['AvgPsqftRank'] = ames_nbhood['AvgPsqft'].rank()\n",
    "\n",
    "n_ppsf_rank = ames_nbhood[['AvgPsqftRank']].to_dict()['AvgPsqftRank']\n",
    "ames_engineered['NeighborhoodRank'] = ames_engineered['Neighborhood'].map(n_ppsf_rank)\n",
    "\n",
    "ames_engineered.drop(['PPSF', 'AvgPsqft', 'Neighborhood'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Apply neighborhood cluster update to Test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "ames_engineered_test['NeighborhoodRank'] = ames_engineered_test['Neighborhood'].map(n_ppsf_rank)\n",
    "ames_engineered_test.drop('Neighborhood', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# One more boxcox after using for PPSF\n",
    "\n",
    "boxcox_transformation('GrLivArea')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a26a27ad0>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAQ+0lEQVR4nO3df2xdd3nH8fezhkKoIUl/YHVJmIuIGFOtltYq2ZCQTdjoD0S6iWhFHaRVWP4pGoxMarY/hpAmLUjrujFN1SIKpNNW03V0jdqOLQp4HX+UkdDSpASUtITipkuApmFuC8Pasz/8rTCJnXtt3+Prfu/7JVn3nO/55pznkW8+9/jcc+3ITCRJdfmlbhcgSeo8w12SKmS4S1KFDHdJqpDhLkkVWtbtAgAuvPDCHBgYaPw4L7zwAuedd17jx1kqeqnfXuoVeqtfe53d/v37f5iZF820bUmE+8DAAPv27Wv8OGNjYwwPDzd+nKWil/rtpV6ht/q119lFxPdm2+ZlGUmqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKmS4S1KFDHdJqtCS+ISqpDMNbH9w1m3bBie56SzbF+Lojusa2a8Wl2fuklQhw12SKmS4S1KFDHdJqpDhLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalCbYV7RByNiAMR8VhE7Ctj50fEnog4XB5XlfGIiE9HxJGIeDwirmiyAUnSmeZy5j6SmZdn5lBZ3w7szcx1wN6yDnANsK58bQXu6FSxkqT2LOSyzEZgV1neBVw/bfyunPIIsDIiLl7AcSRJcxSZ2XpSxHeBk0ACf5eZOyPi+cxcOW3OycxcFREPADsy86tlfC9wa2buO22fW5k6s6e/v//K0dHRjjU1m4mJCfr6+ho/zlLRS/3W2OuBZ07Nuq1/ORx/qZnjDq5e0cyO56nG7+1s5trryMjI/mlXU35Bu39m7x2ZeSwi3gDsiYhvn2VuzDB2xitIZu4EdgIMDQ3l8PBwm6XM39jYGItxnKWil/qtsdez/Rm9bYOT3Hagmb+SefTG4Ub2O181fm9n08le27osk5nHyuMJ4D7gKuD4y5dbyuOJMn0cWDvtn68BjnWkWklSW1qGe0ScFxGve3kZ+C3gILAb2FymbQbuL8u7gQ+Vu2bWA6cy89mOVy5JmlU7P9f1A/dFxMvz/zEzvxQRXwfuiYgtwNPApjL/IeBa4AjwInBzx6uWJJ1Vy3DPzKeAy2YY/xGwYYbxBG7pSHWSpHnxE6qSVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKmS4S1KFDHdJqpDhLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalChrskVchwl6QKGe6SVCHDXZIqZLhLUoWWdbsAaSkb2P5gt0uQ5sUzd0mqUNvhHhHnRMSjEfFAWb8kIr4WEYcj4gsRcW4Zf3VZP1K2DzRTuiRpNnM5c/8ocGja+qeA2zNzHXAS2FLGtwAnM/PNwO1lniRpEbUV7hGxBrgO+ExZD+BdwL1lyi7g+rK8saxTtm8o8yVJiyQys/WkiHuBPwdeB/wRcBPwSDk7JyLWAv+amZdGxEHg6swcL9ueBN6emT88bZ9bga0A/f39V46OjnasqdlMTEzQ19fX+HGWil7qt6leDzxzquP77IT+5XD8pWb2Pbh6RTM7niefx7MbGRnZn5lDM21rebdMRLwXOJGZ+yNi+OXhGaZmG9t+PpC5E9gJMDQ0lMPDw6dP6bixsTEW4zhLRS/121SvNy3Ru2W2DU5y24FmbnY7euNwI/udL5/H89POs+MdwPsi4lrgNcDrgb8CVkbEssycBNYAx8r8cWAtMB4Ry4AVwHMdqVaS1JaW19wz848zc01mDgA3AF/OzBuBrwDvL9M2A/eX5d1lnbL9y9nOtR9JUscs5D73W4GPR8QR4ALgzjJ+J3BBGf84sH1hJUqS5mpOF+0ycwwYK8tPAVfNMOcnwKYO1CZJmic/oSpJFTLcJalChrskVchwl6QKGe6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKmS4S1KFDHdJqpDhLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkipkuEtShQx3SaqQ4S5JFVrW7QIkLS0D2x/s2rGP7riua8eujWfuklQhw12SKtQy3CPiNRHxXxHxzYh4IiI+WcYviYivRcThiPhCRJxbxl9d1o+U7QPNtiBJOl07Z+4/Bd6VmZcBlwNXR8R64FPA7Zm5DjgJbCnztwAnM/PNwO1lniRpEbUM95wyUVZfVb4SeBdwbxnfBVxfljeWdcr2DRERHatYktRSW9fcI+KciHgMOAHsAZ4Ens/MyTJlHFhdllcD3wco208BF3SyaEnS2UVmtj85YiVwH/CnwOfKpRciYi3wUGYORsQTwHsyc7xsexK4KjN/dNq+tgJbAfr7+68cHR3tRD9nNTExQV9fX+PHWSp6qd+mej3wzKmO77MT+pfD8Ze6XUXnDa5eccaYz+PZjYyM7M/MoZm2zek+98x8PiLGgPXAyohYVs7O1wDHyrRxYC0wHhHLgBXAczPsayewE2BoaCiHh4fnUsq8jI2NsRjHWSp6qd+mer2pi/d8n822wUluO1Dfx1SO3jh8xpjP4/lp526Zi8oZOxGxHHg3cAj4CvD+Mm0zcH9Z3l3WKdu/nHP58UCStGDtvPRfDOyKiHOYejG4JzMfiIhvAaMR8WfAo8CdZf6dwN9HxBGmzthvaKBuSdJZtAz3zHwceNsM408BV80w/hNgU0eqkyTNi59QlaQKGe6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKmS4S1KFDHdJqpDhLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalChrskVchwl6QKGe6SVCHDXZIqZLhLUoUMd0mqUMtwj4i1EfGViDgUEU9ExEfL+PkRsSciDpfHVWU8IuLTEXEkIh6PiCuabkKS9IvaOXOfBLZl5luB9cAtEfFrwHZgb2auA/aWdYBrgHXlaytwR8erliSdVctwz8xnM/MbZfl/gEPAamAjsKtM2wVcX5Y3AnfllEeAlRFxcccrlyTNKjKz/ckRA8DDwKXA05m5ctq2k5m5KiIeAHZk5lfL+F7g1szcd9q+tjJ1Zk9/f/+Vo6OjC2yltYmJCfr6+ho/zlLRS/021euBZ051fJ+d0L8cjr/U7So6b3D1ijPGfB7PbmRkZH9mDs20bVm7O4mIPuCfgY9l5o8jYtapM4yd8QqSmTuBnQBDQ0M5PDzcbinzNjY2xmIcZ6nopX6b6vWm7Q92fJ+dsG1wktsOtP3f9xXj6I3DZ4z5PJ6ftu6WiYhXMRXs/5CZXyzDx1++3FIeT5TxcWDttH++BjjWkWolSW1p526ZAO4EDmXmX07btBvYXJY3A/dPG/9QuWtmPXAqM5/tYM2SpBba+bnuHcAHgQMR8VgZ+xNgB3BPRGwBngY2lW0PAdcCR4AXgZs7WrEkqaWW4V7eGJ3tAvuGGeYncMsC65IkLYCfUJWkChnuklQhw12SKmS4S1KFDHdJqpDhLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalChrskVchwl6QKGe6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKmS4S1KFlnW7AKkdA9sfPOv2bYOT3NRijtRLWp65R8RnI+JERBycNnZ+ROyJiMPlcVUZj4j4dEQciYjHI+KKJouXJM2sncsynweuPm1sO7A3M9cBe8s6wDXAuvK1FbijM2VKkuaiZbhn5sPAc6cNbwR2leVdwPXTxu/KKY8AKyPi4k4VK0lqT2Rm60kRA8ADmXlpWX8+M1dO234yM1dFxAPAjsz8ahnfC9yamftm2OdWps7u6e/vv3J0dLQD7ZzdxMQEfX19jR9nqaip3wPPnDrr9v7lcPylRSpmCai138HVK84Yq+l53Mpcex0ZGdmfmUMzbev0G6oxw9iMrx6ZuRPYCTA0NJTDw8MdLuVMY2NjLMZxloqa+m31Zum2wUluO9A79wfU2u/RG4fPGKvpedxKJ3ud762Qx1++3FIeT5TxcWDttHlrgGPzL0+SNB/zDffdwOayvBm4f9r4h8pdM+uBU5n57AJrlCTNUcuf6yLibmAYuDAixoFPADuAeyJiC/A0sKlMfwi4FjgCvAjc3EDNkqQWWoZ7Zn5glk0bZpibwC0LLUqStDD++gFJqpDhLkkVMtwlqUKGuyRVyHCXpAoZ7pJUIcNdkipkuEtShQx3SaqQ4S5JFTLcJalChrskVchwl6QKGe6SVKH6/k6XpFesgRn+nOK2wcmWf2ZxoY7uuK7R/XeDZ+6SVCHDXZIqZLhLUoUMd0mqkOEuSRUy3CWpQoa7JFXIcJekChnuklQhw12SKmS4S1KFDHdJqpC/OExzMtMvdpK09HjmLkkVaiTcI+LqiPhORByJiO1NHEOSNLuOX5aJiHOAvwV+ExgHvh4RuzPzW50+liR1QjcvNzb1u+SbuOZ+FXAkM58CiIhRYCPQSLjP5ZuyGL/0fynptX4l/VxkZmd3GPF+4OrM/HBZ/yDw9sz8yGnztgJby+pbgO90tJCZXQj8cBGOs1T0Ur+91Cv0Vr/2OrtfycyLZtrQxJl7zDB2xitIZu4EdjZw/FlFxL7MHFrMY3ZTL/XbS71Cb/Vrr/PTxBuq48DaaetrgGMNHEeSNIsmwv3rwLqIuCQizgVuAHY3cBxJ0iw6flkmMycj4iPAvwHnAJ/NzCc6fZx5WtTLQEtAL/XbS71Cb/Vrr/PQ8TdUJUnd5ydUJalChrskVahnwj0iVkbEvRHx7Yg4FBG/3u2amhARb4mIx6Z9/TgiPtbtupoUEX8YEU9ExMGIuDsiXtPtmpoSER8tfT5R4/c1Ij4bESci4uC0sfMjYk9EHC6Pq7pZY6fM0uum8r39v4hY0C2RPRPuwF8DX8rMXwUuAw51uZ5GZOZ3MvPyzLwcuBJ4Ebivy2U1JiJWA38ADGXmpUy9iX9Dd6tqRkRcCvw+U58Cvwx4b0Ss625VHfd54OrTxrYDezNzHbC3rNfg85zZ60Hgd4CHF7rzngj3iHg98E7gToDM/N/MfL67VS2KDcCTmfm9bhfSsGXA8ohYBryWej9X8Vbgkcx8MTMngf8AfrvLNXVUZj4MPHfa8EZgV1neBVy/qEU1ZKZeM/NQZnbk0/o9Ee7Am4AfAJ+LiEcj4jMRcV63i1oENwB3d7uIJmXmM8BfAE8DzwKnMvPfu1tVYw4C74yICyLitcC1/OIHBmvVn5nPApTHN3S5nleEXgn3ZcAVwB2Z+TbgBer50W5G5QNk7wP+qdu1NKlcf90IXAL8MnBeRPxed6tqRmYeAj4F7AG+BHwTmOxqUVqyeiXcx4HxzPxaWb+XqbCv2TXANzLzeLcLadi7ge9m5g8y82fAF4Hf6HJNjcnMOzPzisx8J1M/0h/udk2L4HhEXAxQHk90uZ5XhJ4I98z8b+D7EfGWMrSBhn4F8RLyASq/JFM8DayPiNdGRDD1va3yzXKAiHhDeXwjU2+89cL3eDewuSxvBu7vYi2vGD3zCdWIuBz4DHAu8BRwc2ae7G5VzSjXY78PvCkzT3W7nqZFxCeB32XqEsWjwIcz86fdraoZEfGfwAXAz4CPZ+beLpfUURFxNzDM1K++PQ58AvgX4B7gjUy9mG/KzNPfdH3FmaXX54C/AS4Cngcey8z3zGv/vRLuktRLeuKyjCT1GsNdkipkuEtShQx3SaqQ4S5JFTLcJalChrskVej/AbXJw8ENPtxyAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "(np.log(ames_engineered['GrLivArea'] * ames_engineered['OverallQual'])).hist()\n",
    "# np.log(ames_engineered['GrLivArea']).hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "ames_engineered['NeighborhoodRank'] = ames_engineered['NeighborhoodRank'] ** 0.5\n",
    "ames_engineered_test['NeighborhoodRank'] = ames_engineered_test['NeighborhoodRank'] ** 0.5\n",
    "\n",
    "ames_engineered['OQ_x_NR'] = ames_engineered['OverallQual'] * ames_engineered['NeighborhoodRank']\n",
    "ames_engineered_test['OQ_x_NR'] = ames_engineered_test['OverallQual'] * ames_engineered_test['NeighborhoodRank']\n",
    "\n",
    "ames_engineered['OQ_x_TR'] = ames_engineered['OverallQual'] * ames_engineered['TotRmsAbvGrd'] ** 0.5\n",
    "ames_engineered_test['OQ_x_TR'] = ames_engineered_test['OverallQual'] * ames_engineered_test['TotRmsAbvGrd'] ** 0.5\n",
    "\n",
    "# ames_engineered['YearRemodAdd'] = 0 - (ames_engineered['YrSold'] - ames_engineered['YearRemodAdd'])\n",
    "# ames_engineered_test['YearRemodAdd'] = 0 - (ames_engineered_test['YrSold'] - ames_engineered_test['YearRemodAdd'])\n",
    "\n",
    "# ames_engineered['OQ_x_GLA'] = (np.log(ames_engineered['GrLivArea'] * ames_engineered['OverallQual']))\n",
    "# ames_engineered_test['OQ_x_GLA'] = (np.log(ames_engineered_test['GrLivArea'] * ames_engineered_test['OverallQual']))\n",
    "\n",
    "# ames_engineered['OC_x_NR'] = ames_engineered['OverallCond'] * ames_engineered['NeighborhoodRank']\n",
    "# ames_engineered_test['OC_x_NR'] = ames_engineered_test['OverallCond'] * ames_engineered_test['NeighborhoodRank']\n",
    "\n",
    "# ames_engineered['LA_x_NR'] = np.log(ames_engineered['LotArea']) * ames_engineered['NeighborhoodRank']\n",
    "# ames_engineered_test['OLA_x_NR'] = np.log(ames_engineered_test['LotArea']) * ames_engineered_test['NeighborhoodRank']\n",
    "\n",
    "# ames_engineered['GLA_x_NR'] = ames_engineered['GrLivArea'] * ames_engineered['NeighborhoodRank'] ** 2\n",
    "# ames_engineered_test['GLA_x_NR'] = ames_engineered_test['GrLivArea'] * ames_engineered_test['NeighborhoodRank'] ** 2\n",
    "\n",
    "# ames_engineered['Garage_Area_Cars'] = ames_engineered['GarageArea'] * ames_engineered['GarageCars'] ** 0.5\n",
    "# ames_engineered_test['Garage_Area_Cars'] = ames_engineered_test['GarageArea'] * ames_engineered_test['GarageCars'] ** 0.5\n",
    "\n",
    "# ames_engineered['TotalBsmtSF'] = ames_engineered['TotalBsmtSF'].replace(0, 1)\n",
    "# ames_engineered_test['TotalBsmtSF'] = ames_engineered_test['TotalBsmtSF'].replace(0, 1)\n",
    "\n",
    "# ames_engineered['BsmtRatio'] = ames_engineered['BsmtFinSF1'] / ames_engineered['TotalBsmtSF']\n",
    "# ames_engineered_test['BsmtRatio'] = ames_engineered_test['BsmtFinSF1'] / ames_engineered_test['TotalBsmtSF']\n",
    "\n",
    "# ames_engineered['Fireplaces'] = ames_engineered['Fireplaces'] * ames_engineered['FireplaceQu']\n",
    "# ames_engineered_test['Fireplaces'] = ames_engineered_test['Fireplaces'] * ames_engineered_test['FireplaceQu']\n",
    "\n",
    "# ames_engineered['Baths'] = ames_engineered['FullBath'] + 0.5 * ames_engineered['HalfBath']\n",
    "# ames_engineered_test['Baths'] = ames_engineered_test['FullBath'] + 0.5 * ames_engineered_test['HalfBath']\n",
    "\n",
    "ames_engineered.drop(['OverallQual', 'NeighborhoodRank', 'TotRmsAbvGrd'], axis=1, inplace=True)\n",
    "ames_engineered_test.drop(['OverallQual', 'NeighborhoodRank', 'TotRmsAbvGrd'], axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# (np.log(ames_engineered['GrLivArea'] * ames_engineered['NeighborhoodRank'] ** 2)).hist()\n",
    "# ames_engineered['OQ_x_NR'].hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Remove Area features if using Total Area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ames_engineered.drop(['Gr_Liv_Area', 'Total_Bsmt_SF', 'Garage_Area'], axis=1, inplace=True)\n",
    "# Ames_test.drop(['Gr_Liv_Area', 'Total_Bsmt_SF', 'Garage_Area'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apply Regression Models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Reassign ames_engineered to Ames_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "kr_train_trimmed = ames_engineered.copy()\n",
    "kr_test_trimmed = ames_engineered_test.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "Ames_train_final = kr_train_trimmed.copy()\n",
    "Ames_test_final = kr_test_trimmed.copy()\n",
    "\n",
    "Ames_target_train_final = Ames_train_final['SalePrice']\n",
    "\n",
    "Ames_train_final = Ames_train_final.drop(['SalePrice'], axis=1)\n",
    "\n",
    "Ames_target_train_final = np.log(Ames_target_train_final)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "lasso = Lasso()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV, KFold\n",
    "\n",
    "kf5 = KFold(n_splits = 5, shuffle = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>NumberStories</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>ExterQual</th>\n",
       "      <th>ExterCond</th>\n",
       "      <th>BsmtQual</th>\n",
       "      <th>BsmtCond</th>\n",
       "      <th>BsmtExposure</th>\n",
       "      <th>BsmtFinType1</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinType2</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>HeatingQC</th>\n",
       "      <th>CentralAir</th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <th>FullBath</th>\n",
       "      <th>HalfBath</th>\n",
       "      <th>BedroomAbvGr</th>\n",
       "      <th>KitchenAbvGr</th>\n",
       "      <th>KitchenQual</th>\n",
       "      <th>Functional</th>\n",
       "      <th>Fireplaces</th>\n",
       "      <th>FireplaceQu</th>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <th>GarageFinish</th>\n",
       "      <th>GarageCars</th>\n",
       "      <th>GarageArea</th>\n",
       "      <th>GarageQual</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>HasGarage</th>\n",
       "      <th>GarageType_2Types</th>\n",
       "      <th>GarageType_Basment</th>\n",
       "      <th>GarageType_BuiltIn</th>\n",
       "      <th>GarageType_CarPort</th>\n",
       "      <th>GarageType_Detchd</th>\n",
       "      <th>GarageType_NA</th>\n",
       "      <th>MSZoning_C (all)</th>\n",
       "      <th>MSZoning_FV</th>\n",
       "      <th>MSZoning_RH</th>\n",
       "      <th>MSZoning_RM</th>\n",
       "      <th>Street_Grvl</th>\n",
       "      <th>LotConfig_Corner</th>\n",
       "      <th>LotConfig_CulDSac</th>\n",
       "      <th>LotConfig_FR2</th>\n",
       "      <th>LotConfig_FR3</th>\n",
       "      <th>LandSlope_Mod</th>\n",
       "      <th>LandSlope_Sev</th>\n",
       "      <th>RoofStyle_Flat</th>\n",
       "      <th>RoofStyle_Gambrel</th>\n",
       "      <th>RoofStyle_Hip</th>\n",
       "      <th>RoofStyle_Mansard</th>\n",
       "      <th>RoofStyle_Shed</th>\n",
       "      <th>Exterior1st_AsbShng</th>\n",
       "      <th>Exterior1st_AsphShn</th>\n",
       "      <th>Exterior1st_BrkComm</th>\n",
       "      <th>Exterior1st_BrkFace</th>\n",
       "      <th>Exterior1st_CBlock</th>\n",
       "      <th>Exterior1st_CemntBd</th>\n",
       "      <th>Exterior1st_HdBoard</th>\n",
       "      <th>Exterior1st_ImStucc</th>\n",
       "      <th>Exterior1st_MetalSd</th>\n",
       "      <th>Exterior1st_Plywood</th>\n",
       "      <th>Exterior1st_Stone</th>\n",
       "      <th>Exterior1st_Stucco</th>\n",
       "      <th>Exterior1st_Wd Sdng</th>\n",
       "      <th>Exterior1st_WdShing</th>\n",
       "      <th>MasVnrType_BrkCmn</th>\n",
       "      <th>MasVnrType_BrkFace</th>\n",
       "      <th>MasVnrType_Stone</th>\n",
       "      <th>Foundation_BrkTil</th>\n",
       "      <th>Foundation_CBlock</th>\n",
       "      <th>Foundation_Slab</th>\n",
       "      <th>Foundation_Stone</th>\n",
       "      <th>Foundation_Wood</th>\n",
       "      <th>Heating_Floor</th>\n",
       "      <th>Heating_GasW</th>\n",
       "      <th>Heating_Grav</th>\n",
       "      <th>Heating_OthW</th>\n",
       "      <th>Heating_Wall</th>\n",
       "      <th>Electrical_FuseA</th>\n",
       "      <th>Electrical_FuseF</th>\n",
       "      <th>Electrical_FuseP</th>\n",
       "      <th>Electrical_Mix</th>\n",
       "      <th>Condition1_Artery</th>\n",
       "      <th>Condition1_Feedr</th>\n",
       "      <th>Condition1_PosA</th>\n",
       "      <th>Condition1_PosN</th>\n",
       "      <th>Condition1_RRAe</th>\n",
       "      <th>Condition1_RRAn</th>\n",
       "      <th>Condition1_RRNe</th>\n",
       "      <th>Condition1_RRNn</th>\n",
       "      <th>Condition2_Artery</th>\n",
       "      <th>Condition2_Feedr</th>\n",
       "      <th>Condition2_PosA</th>\n",
       "      <th>Condition2_PosN</th>\n",
       "      <th>Condition2_RRAe</th>\n",
       "      <th>Condition2_RRAn</th>\n",
       "      <th>Condition2_RRNn</th>\n",
       "      <th>BldgType_2fmCon</th>\n",
       "      <th>BldgType_Duplex</th>\n",
       "      <th>BldgType_Twnhs</th>\n",
       "      <th>BldgType_TwnhsE</th>\n",
       "      <th>RoofMatl_ClyTile</th>\n",
       "      <th>RoofMatl_Membran</th>\n",
       "      <th>RoofMatl_Metal</th>\n",
       "      <th>RoofMatl_Roll</th>\n",
       "      <th>RoofMatl_Tar&amp;Grv</th>\n",
       "      <th>RoofMatl_WdShake</th>\n",
       "      <th>RoofMatl_WdShngl</th>\n",
       "      <th>Exterior2nd_AsbShng</th>\n",
       "      <th>Exterior2nd_AsphShn</th>\n",
       "      <th>Exterior2nd_Brk Cmn</th>\n",
       "      <th>Exterior2nd_BrkFace</th>\n",
       "      <th>Exterior2nd_CBlock</th>\n",
       "      <th>Exterior2nd_CmentBd</th>\n",
       "      <th>Exterior2nd_HdBoard</th>\n",
       "      <th>Exterior2nd_ImStucc</th>\n",
       "      <th>Exterior2nd_MetalSd</th>\n",
       "      <th>Exterior2nd_Other</th>\n",
       "      <th>Exterior2nd_Plywood</th>\n",
       "      <th>Exterior2nd_Stone</th>\n",
       "      <th>Exterior2nd_Stucco</th>\n",
       "      <th>Exterior2nd_Wd Sdng</th>\n",
       "      <th>Exterior2nd_Wd Shng</th>\n",
       "      <th>Fence_GdPrv</th>\n",
       "      <th>Fence_GdWo</th>\n",
       "      <th>Fence_MnPrv</th>\n",
       "      <th>Fence_MnWw</th>\n",
       "      <th>MiscFeature_Gar2</th>\n",
       "      <th>MiscFeature_Othr</th>\n",
       "      <th>MiscFeature_Shed</th>\n",
       "      <th>MiscFeature_TenC</th>\n",
       "      <th>SaleType_COD</th>\n",
       "      <th>SaleType_CWD</th>\n",
       "      <th>SaleType_Con</th>\n",
       "      <th>SaleType_ConLD</th>\n",
       "      <th>SaleType_ConLI</th>\n",
       "      <th>SaleType_ConLw</th>\n",
       "      <th>SaleType_New</th>\n",
       "      <th>SaleType_Oth</th>\n",
       "      <th>SaleCondition_Abnorml</th>\n",
       "      <th>SaleCondition_AdjLand</th>\n",
       "      <th>SaleCondition_Alloca</th>\n",
       "      <th>SaleCondition_Family</th>\n",
       "      <th>SaleCondition_Partial</th>\n",
       "      <th>MoSold_1</th>\n",
       "      <th>MoSold_2</th>\n",
       "      <th>MoSold_3</th>\n",
       "      <th>MoSold_4</th>\n",
       "      <th>MoSold_5</th>\n",
       "      <th>MoSold_7</th>\n",
       "      <th>MoSold_8</th>\n",
       "      <th>MoSold_9</th>\n",
       "      <th>MoSold_10</th>\n",
       "      <th>MoSold_11</th>\n",
       "      <th>MoSold_12</th>\n",
       "      <th>YrSold_2006</th>\n",
       "      <th>YrSold_2007</th>\n",
       "      <th>YrSold_2008</th>\n",
       "      <th>YrSold_2010</th>\n",
       "      <th>MSSubClass_30</th>\n",
       "      <th>MSSubClass_40</th>\n",
       "      <th>MSSubClass_45</th>\n",
       "      <th>MSSubClass_50</th>\n",
       "      <th>MSSubClass_60</th>\n",
       "      <th>MSSubClass_70</th>\n",
       "      <th>MSSubClass_75</th>\n",
       "      <th>MSSubClass_80</th>\n",
       "      <th>MSSubClass_85</th>\n",
       "      <th>MSSubClass_90</th>\n",
       "      <th>MSSubClass_120</th>\n",
       "      <th>MSSubClass_160</th>\n",
       "      <th>MSSubClass_180</th>\n",
       "      <th>MSSubClass_190</th>\n",
       "      <th>OQ_x_NR</th>\n",
       "      <th>OQ_x_TR</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>65.0</td>\n",
       "      <td>10.427530</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>2003</td>\n",
       "      <td>2003</td>\n",
       "      <td>196.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>706</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.452663</td>\n",
       "      <td>198.284295</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.219622</td>\n",
       "      <td>854</td>\n",
       "      <td>0</td>\n",
       "      <td>1710</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.936937</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>548</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.512293</td>\n",
       "      <td>19.798990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>80.0</td>\n",
       "      <td>10.596444</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1976</td>\n",
       "      <td>1976</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>978</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>28.330978</td>\n",
       "      <td>264.601145</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.442275</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1262</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.693694</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>460</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>28.774989</td>\n",
       "      <td>14.696938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>68.0</td>\n",
       "      <td>10.807339</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>2001</td>\n",
       "      <td>2002</td>\n",
       "      <td>162.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>486</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>35.046589</td>\n",
       "      <td>209.206786</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.261495</td>\n",
       "      <td>866</td>\n",
       "      <td>0</td>\n",
       "      <td>1786</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.918919</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2</td>\n",
       "      <td>608</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.512293</td>\n",
       "      <td>17.146428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60.0</td>\n",
       "      <td>10.589518</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1915</td>\n",
       "      <td>1970</td>\n",
       "      <td>0.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>216</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>39.069656</td>\n",
       "      <td>180.779930</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.286701</td>\n",
       "      <td>756</td>\n",
       "      <td>0</td>\n",
       "      <td>1717</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.891892</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>642</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>272</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27.110883</td>\n",
       "      <td>18.520259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>84.0</td>\n",
       "      <td>11.124528</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>5</td>\n",
       "      <td>2000</td>\n",
       "      <td>2000</td>\n",
       "      <td>350.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>655</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>37.229500</td>\n",
       "      <td>246.150776</td>\n",
       "      <td>25.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5.387108</td>\n",
       "      <td>1053</td>\n",
       "      <td>0</td>\n",
       "      <td>2198</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.909910</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3</td>\n",
       "      <td>836</td>\n",
       "      <td>9.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>192</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>33.941125</td>\n",
       "      <td>24.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    LotFrontage    LotArea  Alley  LotShape  LandContour  Utilities  \\\n",
       "Id                                                                    \n",
       "1          65.0  10.427530    0.0       0.0          0.0        3.0   \n",
       "2          80.0  10.596444    0.0       0.0          0.0        3.0   \n",
       "3          68.0  10.807339    0.0      -1.0          0.0        3.0   \n",
       "4          60.0  10.589518    0.0      -1.0          0.0        3.0   \n",
       "5          84.0  11.124528    0.0      -1.0          0.0        3.0   \n",
       "\n",
       "    NumberStories  OverallCond  YearBuilt  YearRemodAdd  MasVnrArea  \\\n",
       "Id                                                                    \n",
       "1             2.0            5       2003          2003       196.0   \n",
       "2             1.0            8       1976          1976         0.0   \n",
       "3             2.0            5       2001          2002       162.0   \n",
       "4             2.0            5       1915          1970         0.0   \n",
       "5             2.0            5       2000          2000       350.0   \n",
       "\n",
       "    ExterQual  ExterCond  BsmtQual  BsmtCond  BsmtExposure  BsmtFinType1  \\\n",
       "Id                                                                         \n",
       "1        16.0        9.0      16.0       9.0           1.0           6.0   \n",
       "2         9.0        9.0      16.0       9.0           4.0           5.0   \n",
       "3        16.0        9.0      16.0       9.0           2.0           6.0   \n",
       "4         9.0        9.0       9.0      16.0           1.0           5.0   \n",
       "5        16.0        9.0      16.0       9.0           3.0           6.0   \n",
       "\n",
       "    BsmtFinSF1  BsmtFinType2  BsmtFinSF2  BsmtUnfSF  TotalBsmtSF  HeatingQC  \\\n",
       "Id                                                                            \n",
       "1          706           1.0           0  20.452663   198.284295       25.0   \n",
       "2          978           1.0           0  28.330978   264.601145       25.0   \n",
       "3          486           1.0           0  35.046589   209.206786       25.0   \n",
       "4          216           1.0           0  39.069656   180.779930       16.0   \n",
       "5          655           1.0           0  37.229500   246.150776       25.0   \n",
       "\n",
       "    CentralAir  1stFlrSF  2ndFlrSF  LowQualFinSF  GrLivArea  BsmtFullBath  \\\n",
       "Id                                                                          \n",
       "1          1.0  5.219622       854             0       1710             1   \n",
       "2          1.0  5.442275         0             0       1262             0   \n",
       "3          1.0  5.261495       866             0       1786             1   \n",
       "4          1.0  5.286701       756             0       1717             1   \n",
       "5          1.0  5.387108      1053             0       2198             1   \n",
       "\n",
       "    BsmtHalfBath  FullBath  HalfBath  BedroomAbvGr  KitchenAbvGr  KitchenQual  \\\n",
       "Id                                                                              \n",
       "1              0         2         1             3             1         16.0   \n",
       "2              1         2         0             3             1          9.0   \n",
       "3              0         2         1             3             1         16.0   \n",
       "4              0         1         0             3             1         16.0   \n",
       "5              0         2         1             4             1         16.0   \n",
       "\n",
       "    Functional  Fireplaces  FireplaceQu  GarageYrBlt  GarageFinish  \\\n",
       "Id                                                                   \n",
       "1          0.0           0          0.0     0.936937           2.0   \n",
       "2          0.0           1          9.0     0.693694           2.0   \n",
       "3          0.0           1          9.0     0.918919           2.0   \n",
       "4          0.0           1         16.0     0.891892           1.0   \n",
       "5          0.0           1          9.0     0.909910           2.0   \n",
       "\n",
       "    GarageCars  GarageArea  GarageQual  GarageCond  PavedDrive  WoodDeckSF  \\\n",
       "Id                                                                           \n",
       "1            2         548         9.0         9.0         2.0           0   \n",
       "2            2         460         9.0         9.0         2.0         298   \n",
       "3            2         608         9.0         9.0         2.0           0   \n",
       "4            3         642         9.0         9.0         2.0           0   \n",
       "5            3         836         9.0         9.0         2.0         192   \n",
       "\n",
       "    OpenPorchSF  EnclosedPorch  3SsnPorch  ScreenPorch  PoolArea  PoolQC  \\\n",
       "Id                                                                         \n",
       "1            61              0          0            0         0     0.0   \n",
       "2             0              0          0            0         0     0.0   \n",
       "3            42              0          0            0         0     0.0   \n",
       "4            35            272          0            0         0     0.0   \n",
       "5            84              0          0            0         0     0.0   \n",
       "\n",
       "    MiscVal  HasGarage  GarageType_2Types  GarageType_Basment  \\\n",
       "Id                                                              \n",
       "1         0          1                  0                   0   \n",
       "2         0          1                  0                   0   \n",
       "3         0          1                  0                   0   \n",
       "4         0          1                  0                   0   \n",
       "5         0          1                  0                   0   \n",
       "\n",
       "    GarageType_BuiltIn  GarageType_CarPort  GarageType_Detchd  GarageType_NA  \\\n",
       "Id                                                                             \n",
       "1                    0                   0                  0              0   \n",
       "2                    0                   0                  0              0   \n",
       "3                    0                   0                  0              0   \n",
       "4                    0                   0                  1              0   \n",
       "5                    0                   0                  0              0   \n",
       "\n",
       "    MSZoning_C (all)  MSZoning_FV  MSZoning_RH  MSZoning_RM  Street_Grvl  \\\n",
       "Id                                                                         \n",
       "1                  0            0            0            0            0   \n",
       "2                  0            0            0            0            0   \n",
       "3                  0            0            0            0            0   \n",
       "4                  0            0            0            0            0   \n",
       "5                  0            0            0            0            0   \n",
       "\n",
       "    LotConfig_Corner  LotConfig_CulDSac  LotConfig_FR2  LotConfig_FR3  \\\n",
       "Id                                                                      \n",
       "1                  0                  0              0              0   \n",
       "2                  0                  0              1              0   \n",
       "3                  0                  0              0              0   \n",
       "4                  1                  0              0              0   \n",
       "5                  0                  0              1              0   \n",
       "\n",
       "    LandSlope_Mod  LandSlope_Sev  RoofStyle_Flat  RoofStyle_Gambrel  \\\n",
       "Id                                                                    \n",
       "1               0              0               0                  0   \n",
       "2               0              0               0                  0   \n",
       "3               0              0               0                  0   \n",
       "4               0              0               0                  0   \n",
       "5               0              0               0                  0   \n",
       "\n",
       "    RoofStyle_Hip  RoofStyle_Mansard  RoofStyle_Shed  Exterior1st_AsbShng  \\\n",
       "Id                                                                          \n",
       "1               0                  0               0                    0   \n",
       "2               0                  0               0                    0   \n",
       "3               0                  0               0                    0   \n",
       "4               0                  0               0                    0   \n",
       "5               0                  0               0                    0   \n",
       "\n",
       "    Exterior1st_AsphShn  Exterior1st_BrkComm  Exterior1st_BrkFace  \\\n",
       "Id                                                                  \n",
       "1                     0                    0                    0   \n",
       "2                     0                    0                    0   \n",
       "3                     0                    0                    0   \n",
       "4                     0                    0                    0   \n",
       "5                     0                    0                    0   \n",
       "\n",
       "    Exterior1st_CBlock  Exterior1st_CemntBd  Exterior1st_HdBoard  \\\n",
       "Id                                                                 \n",
       "1                    0                    0                    0   \n",
       "2                    0                    0                    0   \n",
       "3                    0                    0                    0   \n",
       "4                    0                    0                    0   \n",
       "5                    0                    0                    0   \n",
       "\n",
       "    Exterior1st_ImStucc  Exterior1st_MetalSd  Exterior1st_Plywood  \\\n",
       "Id                                                                  \n",
       "1                     0                    0                    0   \n",
       "2                     0                    1                    0   \n",
       "3                     0                    0                    0   \n",
       "4                     0                    0                    0   \n",
       "5                     0                    0                    0   \n",
       "\n",
       "    Exterior1st_Stone  Exterior1st_Stucco  Exterior1st_Wd Sdng  \\\n",
       "Id                                                               \n",
       "1                   0                   0                    0   \n",
       "2                   0                   0                    0   \n",
       "3                   0                   0                    0   \n",
       "4                   0                   0                    1   \n",
       "5                   0                   0                    0   \n",
       "\n",
       "    Exterior1st_WdShing  MasVnrType_BrkCmn  MasVnrType_BrkFace  \\\n",
       "Id                                                               \n",
       "1                     0                  0                   1   \n",
       "2                     0                  0                   0   \n",
       "3                     0                  0                   1   \n",
       "4                     0                  0                   0   \n",
       "5                     0                  0                   1   \n",
       "\n",
       "    MasVnrType_Stone  Foundation_BrkTil  Foundation_CBlock  Foundation_Slab  \\\n",
       "Id                                                                            \n",
       "1                  0                  0                  0                0   \n",
       "2                  0                  0                  1                0   \n",
       "3                  0                  0                  0                0   \n",
       "4                  0                  1                  0                0   \n",
       "5                  0                  0                  0                0   \n",
       "\n",
       "    Foundation_Stone  Foundation_Wood  Heating_Floor  Heating_GasW  \\\n",
       "Id                                                                   \n",
       "1                  0                0              0             0   \n",
       "2                  0                0              0             0   \n",
       "3                  0                0              0             0   \n",
       "4                  0                0              0             0   \n",
       "5                  0                0              0             0   \n",
       "\n",
       "    Heating_Grav  Heating_OthW  Heating_Wall  Electrical_FuseA  \\\n",
       "Id                                                               \n",
       "1              0             0             0                 0   \n",
       "2              0             0             0                 0   \n",
       "3              0             0             0                 0   \n",
       "4              0             0             0                 0   \n",
       "5              0             0             0                 0   \n",
       "\n",
       "    Electrical_FuseF  Electrical_FuseP  Electrical_Mix  Condition1_Artery  \\\n",
       "Id                                                                          \n",
       "1                  0                 0               0                  0   \n",
       "2                  0                 0               0                  0   \n",
       "3                  0                 0               0                  0   \n",
       "4                  0                 0               0                  0   \n",
       "5                  0                 0               0                  0   \n",
       "\n",
       "    Condition1_Feedr  Condition1_PosA  Condition1_PosN  Condition1_RRAe  \\\n",
       "Id                                                                        \n",
       "1                  0                0                0                0   \n",
       "2                  1                0                0                0   \n",
       "3                  0                0                0                0   \n",
       "4                  0                0                0                0   \n",
       "5                  0                0                0                0   \n",
       "\n",
       "    Condition1_RRAn  Condition1_RRNe  Condition1_RRNn  Condition2_Artery  \\\n",
       "Id                                                                         \n",
       "1                 0                0                0                  0   \n",
       "2                 0                0                0                  0   \n",
       "3                 0                0                0                  0   \n",
       "4                 0                0                0                  0   \n",
       "5                 0                0                0                  0   \n",
       "\n",
       "    Condition2_Feedr  Condition2_PosA  Condition2_PosN  Condition2_RRAe  \\\n",
       "Id                                                                        \n",
       "1                  0                0                0                0   \n",
       "2                  0                0                0                0   \n",
       "3                  0                0                0                0   \n",
       "4                  0                0                0                0   \n",
       "5                  0                0                0                0   \n",
       "\n",
       "    Condition2_RRAn  Condition2_RRNn  BldgType_2fmCon  BldgType_Duplex  \\\n",
       "Id                                                                       \n",
       "1                 0                0                0                0   \n",
       "2                 0                0                0                0   \n",
       "3                 0                0                0                0   \n",
       "4                 0                0                0                0   \n",
       "5                 0                0                0                0   \n",
       "\n",
       "    BldgType_Twnhs  BldgType_TwnhsE  RoofMatl_ClyTile  RoofMatl_Membran  \\\n",
       "Id                                                                        \n",
       "1                0                0                 0                 0   \n",
       "2                0                0                 0                 0   \n",
       "3                0                0                 0                 0   \n",
       "4                0                0                 0                 0   \n",
       "5                0                0                 0                 0   \n",
       "\n",
       "    RoofMatl_Metal  RoofMatl_Roll  RoofMatl_Tar&Grv  RoofMatl_WdShake  \\\n",
       "Id                                                                      \n",
       "1                0              0                 0                 0   \n",
       "2                0              0                 0                 0   \n",
       "3                0              0                 0                 0   \n",
       "4                0              0                 0                 0   \n",
       "5                0              0                 0                 0   \n",
       "\n",
       "    RoofMatl_WdShngl  Exterior2nd_AsbShng  Exterior2nd_AsphShn  \\\n",
       "Id                                                               \n",
       "1                  0                    0                    0   \n",
       "2                  0                    0                    0   \n",
       "3                  0                    0                    0   \n",
       "4                  0                    0                    0   \n",
       "5                  0                    0                    0   \n",
       "\n",
       "    Exterior2nd_Brk Cmn  Exterior2nd_BrkFace  Exterior2nd_CBlock  \\\n",
       "Id                                                                 \n",
       "1                     0                    0                   0   \n",
       "2                     0                    0                   0   \n",
       "3                     0                    0                   0   \n",
       "4                     0                    0                   0   \n",
       "5                     0                    0                   0   \n",
       "\n",
       "    Exterior2nd_CmentBd  Exterior2nd_HdBoard  Exterior2nd_ImStucc  \\\n",
       "Id                                                                  \n",
       "1                     0                    0                    0   \n",
       "2                     0                    0                    0   \n",
       "3                     0                    0                    0   \n",
       "4                     0                    0                    0   \n",
       "5                     0                    0                    0   \n",
       "\n",
       "    Exterior2nd_MetalSd  Exterior2nd_Other  Exterior2nd_Plywood  \\\n",
       "Id                                                                \n",
       "1                     0                  0                    0   \n",
       "2                     1                  0                    0   \n",
       "3                     0                  0                    0   \n",
       "4                     0                  0                    0   \n",
       "5                     0                  0                    0   \n",
       "\n",
       "    Exterior2nd_Stone  Exterior2nd_Stucco  Exterior2nd_Wd Sdng  \\\n",
       "Id                                                               \n",
       "1                   0                   0                    0   \n",
       "2                   0                   0                    0   \n",
       "3                   0                   0                    0   \n",
       "4                   0                   0                    0   \n",
       "5                   0                   0                    0   \n",
       "\n",
       "    Exterior2nd_Wd Shng  Fence_GdPrv  Fence_GdWo  Fence_MnPrv  Fence_MnWw  \\\n",
       "Id                                                                          \n",
       "1                     0            0           0            0           0   \n",
       "2                     0            0           0            0           0   \n",
       "3                     0            0           0            0           0   \n",
       "4                     1            0           0            0           0   \n",
       "5                     0            0           0            0           0   \n",
       "\n",
       "    MiscFeature_Gar2  MiscFeature_Othr  MiscFeature_Shed  MiscFeature_TenC  \\\n",
       "Id                                                                           \n",
       "1                  0                 0                 0                 0   \n",
       "2                  0                 0                 0                 0   \n",
       "3                  0                 0                 0                 0   \n",
       "4                  0                 0                 0                 0   \n",
       "5                  0                 0                 0                 0   \n",
       "\n",
       "    SaleType_COD  SaleType_CWD  SaleType_Con  SaleType_ConLD  SaleType_ConLI  \\\n",
       "Id                                                                             \n",
       "1              0             0             0               0               0   \n",
       "2              0             0             0               0               0   \n",
       "3              0             0             0               0               0   \n",
       "4              0             0             0               0               0   \n",
       "5              0             0             0               0               0   \n",
       "\n",
       "    SaleType_ConLw  SaleType_New  SaleType_Oth  SaleCondition_Abnorml  \\\n",
       "Id                                                                      \n",
       "1                0             0             0                      0   \n",
       "2                0             0             0                      0   \n",
       "3                0             0             0                      0   \n",
       "4                0             0             0                      1   \n",
       "5                0             0             0                      0   \n",
       "\n",
       "    SaleCondition_AdjLand  SaleCondition_Alloca  SaleCondition_Family  \\\n",
       "Id                                                                      \n",
       "1                       0                     0                     0   \n",
       "2                       0                     0                     0   \n",
       "3                       0                     0                     0   \n",
       "4                       0                     0                     0   \n",
       "5                       0                     0                     0   \n",
       "\n",
       "    SaleCondition_Partial  MoSold_1  MoSold_2  MoSold_3  MoSold_4  MoSold_5  \\\n",
       "Id                                                                            \n",
       "1                       0         0         1         0         0         0   \n",
       "2                       0         0         0         0         0         1   \n",
       "3                       0         0         0         0         0         0   \n",
       "4                       0         0         1         0         0         0   \n",
       "5                       0         0         0         0         0         0   \n",
       "\n",
       "    MoSold_7  MoSold_8  MoSold_9  MoSold_10  MoSold_11  MoSold_12  \\\n",
       "Id                                                                  \n",
       "1          0         0         0          0          0          0   \n",
       "2          0         0         0          0          0          0   \n",
       "3          0         0         1          0          0          0   \n",
       "4          0         0         0          0          0          0   \n",
       "5          0         0         0          0          0          1   \n",
       "\n",
       "    YrSold_2006  YrSold_2007  YrSold_2008  YrSold_2010  MSSubClass_30  \\\n",
       "Id                                                                      \n",
       "1             0            0            1            0              0   \n",
       "2             0            1            0            0              0   \n",
       "3             0            0            1            0              0   \n",
       "4             1            0            0            0              0   \n",
       "5             0            0            1            0              0   \n",
       "\n",
       "    MSSubClass_40  MSSubClass_45  MSSubClass_50  MSSubClass_60  MSSubClass_70  \\\n",
       "Id                                                                              \n",
       "1               0              0              0              1              0   \n",
       "2               0              0              0              0              0   \n",
       "3               0              0              0              1              0   \n",
       "4               0              0              0              0              1   \n",
       "5               0              0              0              1              0   \n",
       "\n",
       "    MSSubClass_75  MSSubClass_80  MSSubClass_85  MSSubClass_90  \\\n",
       "Id                                                               \n",
       "1               0              0              0              0   \n",
       "2               0              0              0              0   \n",
       "3               0              0              0              0   \n",
       "4               0              0              0              0   \n",
       "5               0              0              0              0   \n",
       "\n",
       "    MSSubClass_120  MSSubClass_160  MSSubClass_180  MSSubClass_190    OQ_x_NR  \\\n",
       "Id                                                                              \n",
       "1                0               0               0               0  30.512293   \n",
       "2                0               0               0               0  28.774989   \n",
       "3                0               0               0               0  30.512293   \n",
       "4                0               0               0               0  27.110883   \n",
       "5                0               0               0               0  33.941125   \n",
       "\n",
       "      OQ_x_TR  \n",
       "Id             \n",
       "1   19.798990  \n",
       "2   14.696938  \n",
       "3   17.146428  \n",
       "4   18.520259  \n",
       "5   24.000000  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Ames_train_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(Ames_train_final)\n",
    "Ames_train_final_standardized = scaler.transform(Ames_train_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best ElasticNet Score: 0.890611864590032\n"
     ]
    }
   ],
   "source": [
    "lasso = Lasso(max_iter = 2000, tol=0.1)\n",
    "en = ElasticNet(max_iter = 2000, tol=0.1)\n",
    "\n",
    "# params_lasso = [ {'alpha':[1e-4, 1e-3, 1e-2, 1e-1, 1, 10]} ]\n",
    "params_en = [ {'alpha':[1e-4, 1e-3, 1e-2, 1e-1, 1, 10],\n",
    "              'l1_ratio':[.25, .3, .35, .4, .45, .5, .55, .6, .65, .7, .75, .8, .85]} ]\n",
    "\n",
    "kf5 = KFold(n_splits = 5, shuffle = True)\n",
    "\n",
    "# grid_lasso = GridSearchCV(estimator = lasso, param_grid = params_lasso, cv = 5)\n",
    "grid_en = GridSearchCV(estimator = en, param_grid = params_en, cv = 5)\n",
    "\n",
    "# grid_lasso.fit(Ames_train_final_standardized, Ames_target_train_final)\n",
    "grid_en.fit(Ames_train_final_standardized, Ames_target_train_final)\n",
    "\n",
    "# print(f'Best Lasso Score: {grid_lasso.best_score_}')\n",
    "print(f'Best ElasticNet Score: {grid_en.best_score_}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# best_model = grid_lasso.best_estimator_\n",
    "best_model = grid_en.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "# best_model.score(Ames_test_final, Ames_target_test_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ElasticNet(alpha=0.01, copy_X=True, fit_intercept=True, l1_ratio=0.55,\n",
       "           max_iter=2000, normalize=False, positive=False, precompute=False,\n",
       "           random_state=None, selection='cyclic', tol=0.1, warm_start=False)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'alpha': 0.01, 'l1_ratio': 0.55}"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# grid_lasso.best_params_\n",
    "grid_en.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The intercept is 12.0241\n",
      "The slopes are LotFrontage       0.000000\n",
      "LotArea           0.021035\n",
      "Alley             0.000000\n",
      "LotShape         -0.000000\n",
      "LandContour      -0.000000\n",
      "                    ...   \n",
      "MSSubClass_160   -0.000000\n",
      "MSSubClass_180   -0.000000\n",
      "MSSubClass_190   -0.000000\n",
      "OQ_x_NR           0.088042\n",
      "OQ_x_TR           0.010472\n",
      "Length: 200, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print('The intercept is %.4f' %(best_model.intercept_))\n",
    "lassoCoef = pd.Series(best_model.coef_, index=Ames_train_final.columns)\n",
    "print('The slopes are %s' %(lassoCoef))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OQ_x_NR                  0.088042\n",
       "1stFlrSF                 0.074199\n",
       "GrLivArea                0.057088\n",
       "2ndFlrSF                 0.051673\n",
       "RoofMatl_ClyTile         0.043378\n",
       "OverallCond              0.042528\n",
       "KitchenQual              0.030836\n",
       "MSZoning_C (all)         0.026814\n",
       "GarageCars               0.026724\n",
       "TotalBsmtSF              0.025053\n",
       "LotArea                  0.021035\n",
       "Condition2_PosN          0.020114\n",
       "BsmtFinSF1               0.018493\n",
       "Functional               0.018400\n",
       "FullBath                 0.016281\n",
       "BsmtQual                 0.015724\n",
       "GarageArea               0.014295\n",
       "HalfBath                 0.014176\n",
       "GarageFinish             0.013488\n",
       "FireplaceQu              0.013238\n",
       "KitchenAbvGr             0.013148\n",
       "SaleType_New             0.013017\n",
       "MSSubClass_30            0.012921\n",
       "SaleCondition_Abnorml    0.012723\n",
       "Fireplaces               0.011858\n",
       "HeatingQC                0.011625\n",
       "OQ_x_TR                  0.010472\n",
       "Foundation_CBlock        0.010436\n",
       "GarageYrBlt              0.010094\n",
       "BsmtFullBath             0.009790\n",
       "CentralAir               0.009558\n",
       "BsmtExposure             0.009429\n",
       "BsmtFinType1             0.008543\n",
       "Condition1_Artery        0.008132\n",
       "Foundation_BrkTil        0.006976\n",
       "ScreenPorch              0.006563\n",
       "Exterior1st_BrkFace      0.006196\n",
       "Condition1_Feedr         0.005797\n",
       "MSZoning_RM              0.005250\n",
       "LotConfig_CulDSac        0.005095\n",
       "WoodDeckSF               0.004547\n",
       "MasVnrType_Stone         0.004429\n",
       "Heating_Grav             0.003891\n",
       "Exterior1st_BrkComm      0.003732\n",
       "Condition1_RRAe          0.003717\n",
       "RoofMatl_WdShngl         0.003231\n",
       "GarageType_2Types        0.002979\n",
       "PavedDrive               0.002789\n",
       "MSZoning_FV              0.002606\n",
       "OpenPorchSF              0.002476\n",
       "GarageType_CarPort       0.002034\n",
       "RoofStyle_Hip            0.001656\n",
       "SaleCondition_Family     0.001215\n",
       "RoofMatl_Membran         0.000991\n",
       "SaleType_ConLD           0.000854\n",
       "Utilities                0.000758\n",
       "Exterior2nd_AsbShng      0.000326\n",
       "Exterior1st_Wd Sdng      0.000170\n",
       "GarageQual               0.000106\n",
       "dtype: float64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sortedCoefs = np.abs(lassoCoef).sort_values(ascending=False)\n",
    "sortedCoefs[sortedCoefs > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import ensemble\n",
    "\n",
    "randomForest = ensemble.RandomForestRegressor(min_samples_leaf=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn import ensemble\n",
    "\n",
    "# randomForest = ensemble.RandomForestRegressor()\n",
    "\n",
    "# randomForest.set_params(random_state=0)\n",
    "\n",
    "# randomForest.fit(Ames_train_final, Ames_target_train_final) \n",
    "\n",
    "# print(\"The training error is: %.5f\" % (randomForest.score(Ames_train_final, Ames_target_train_final)))\n",
    "# print(\"The test     error is: %.5f\" % (randomForest.score(Ames_test_final, Ames_target_test_final)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# # set the parameter grid\n",
    "# grid_para_forest = {\n",
    "#     'max_depth': [1, 5, 10, 15, 20],\n",
    "#     'n_estimators': range(10, 110, 10)\n",
    "# }\n",
    "\n",
    "\n",
    "# # , n_jobs=-1\n",
    "# # Above parameter caused memory errors\n",
    "\n",
    "# grid_search_forest = GridSearchCV(randomForest, grid_para_forest, cv=5)\n",
    "# # grid_search_forest = cross_val_score(randomForest, Ames_train_final, Ames_target_train_final, fit_params = grid_para_forest, scoring='accuracy', cv=5)\n",
    "# %time grid_search_forest.fit(Ames_train_final, Ames_target_train_final)\n",
    "# # Took 3m 13s last run\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 57.2 s, sys: 1.04 s, total: 58.3 s\n",
      "Wall time: 59.5 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score=nan,\n",
       "             estimator=RandomForestRegressor(bootstrap=True, ccp_alpha=0.0,\n",
       "                                             criterion='mse', max_depth=None,\n",
       "                                             max_features='auto',\n",
       "                                             max_leaf_nodes=None,\n",
       "                                             max_samples=None,\n",
       "                                             min_impurity_decrease=0.0,\n",
       "                                             min_impurity_split=None,\n",
       "                                             min_samples_leaf=1,\n",
       "                                             min_samples_split=2,\n",
       "                                             min_weight_fraction_leaf=0.0,\n",
       "                                             n_estimators=100, n_jobs=None,\n",
       "                                             oob_score=False, random_state=None,\n",
       "                                             verbose=0, warm_start=False),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'max_depth': [35, 40, 45],\n",
       "                         'n_estimators': range(80, 100, 10)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# set the parameter grid\n",
    "grid_para_forest = {\n",
    "    'max_depth': [35, 40, 45],\n",
    "    'n_estimators': range(80, 100, 10)\n",
    "}\n",
    "\n",
    "grid_search_forest2 = GridSearchCV(randomForest, grid_para_forest, cv=5)\n",
    "%time grid_search_forest2.fit(Ames_train_final, Ames_target_train_final)\n",
    "# Took 0m 47s last run\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 35, 'n_estimators': 80}"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the best parameters\n",
    "# grid_search_forest.best_params_\n",
    "grid_search_forest2.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8812550021795594"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the best score\n",
    "# grid_search_forest.best_score_\n",
    "grid_search_forest2.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('OQ_x_NR', 0.45199569336253614),\n",
       " ('OQ_x_TR', 0.23968899759747003),\n",
       " ('GrLivArea', 0.07563469673656506),\n",
       " ('TotalBsmtSF', 0.027215273114522272),\n",
       " ('1stFlrSF', 0.022445168665887007),\n",
       " ('BsmtFinSF1', 0.019202342217229357),\n",
       " ('GarageArea', 0.017790326132936036),\n",
       " ('LotArea', 0.012953795425400544),\n",
       " ('CentralAir', 0.010028856759871141),\n",
       " ('OverallCond', 0.008429657845247346),\n",
       " ('GarageCars', 0.00733424838703531),\n",
       " ('YearRemodAdd', 0.006548659975717514),\n",
       " ('YearBuilt', 0.006349974945960621),\n",
       " ('2ndFlrSF', 0.006081612699029763),\n",
       " ('FireplaceQu', 0.005125654003590416),\n",
       " ('BsmtUnfSF', 0.005097366112022467),\n",
       " ('OpenPorchSF', 0.004593338346251373),\n",
       " ('GarageYrBlt', 0.004549805913254161),\n",
       " ('LotFrontage', 0.0043154093877031865),\n",
       " ('WoodDeckSF', 0.003409568921070209),\n",
       " ('BsmtFinType1', 0.003023295723580984),\n",
       " ('GarageFinish', 0.0026160526270293067),\n",
       " ('MasVnrArea', 0.002561057505092547),\n",
       " ('GarageQual', 0.0023487416692067483),\n",
       " ('MSZoning_C (all)', 0.0021339119697783107),\n",
       " ('KitchenQual', 0.0018112552337019232),\n",
       " ('PavedDrive', 0.0017890447346342445),\n",
       " ('EnclosedPorch', 0.0016594646806915585),\n",
       " ('SaleCondition_Abnorml', 0.0015389083235803265),\n",
       " ('HeatingQC', 0.0014632942803886894),\n",
       " ('ExterCond', 0.0014432184688541161),\n",
       " ('GarageCond', 0.0013838831398943422),\n",
       " ('BsmtExposure', 0.001348755708078444),\n",
       " ('FullBath', 0.0012993812178212216),\n",
       " ('Functional', 0.001297582003814306),\n",
       " ('BsmtCond', 0.001283849129185924),\n",
       " ('BedroomAbvGr', 0.0012642364885300367),\n",
       " ('BsmtQual', 0.001223959678016225),\n",
       " ('MSZoning_RM', 0.0011463344859973233),\n",
       " ('KitchenAbvGr', 0.0010542157035449819),\n",
       " ('Fireplaces', 0.0009997542966390712),\n",
       " ('GarageType_Detchd', 0.0009220831413003095),\n",
       " ('HalfBath', 0.000909172827063791),\n",
       " ('LandContour', 0.0009004320615613173),\n",
       " ('BsmtFullBath', 0.000828284887036385),\n",
       " ('LotShape', 0.0007909525918305431),\n",
       " ('Fence_GdWo', 0.000728422265204734),\n",
       " ('ExterQual', 0.0006890402261081998),\n",
       " ('MoSold_12', 0.0005947614451067494),\n",
       " ('YrSold_2007', 0.0005386498858725725),\n",
       " ('ScreenPorch', 0.0005353146990487252),\n",
       " ('YrSold_2008', 0.0004901087404404992),\n",
       " ('MoSold_4', 0.00046922955833705567),\n",
       " ('NumberStories', 0.00046848840912606644),\n",
       " ('MSSubClass_60', 0.0004291250562794893),\n",
       " ('YrSold_2006', 0.00041828155055695485),\n",
       " ('BsmtFinType2', 0.00040716314007602255),\n",
       " ('MoSold_8', 0.00040457240715123836),\n",
       " ('RoofStyle_Hip', 0.0003922791812060335),\n",
       " ('MoSold_7', 0.0003894661714763748),\n",
       " ('LotConfig_Corner', 0.0003880684759603867),\n",
       " ('Foundation_BrkTil', 0.0003833627250137139),\n",
       " ('MasVnrType_BrkFace', 0.0003727231634287005),\n",
       " ('MoSold_5', 0.0003676271763846068),\n",
       " ('Heating_Grav', 0.0003625754278537777),\n",
       " ('Exterior2nd_Wd Sdng', 0.0003570518655488856),\n",
       " ('MoSold_10', 0.0003459475198345608),\n",
       " ('SaleCondition_Family', 0.00034390532519753105),\n",
       " ('BldgType_Duplex', 0.00033768077522431056),\n",
       " ('MoSold_11', 0.0003291916263107109),\n",
       " ('Condition1_Artery', 0.0003241916744986483),\n",
       " ('MSSubClass_30', 0.0003240067109020657),\n",
       " ('Exterior1st_Wd Sdng', 0.00031762449057315596),\n",
       " ('Alley', 0.00031101613757048214),\n",
       " ('Exterior2nd_Wd Shng', 0.00030846920843500744),\n",
       " ('Foundation_CBlock', 0.0003021057020029873),\n",
       " ('MSSubClass_90', 0.0002941517899549378),\n",
       " ('MoSold_1', 0.0002933543799442951),\n",
       " ('YrSold_2010', 0.0002657610040776463),\n",
       " ('LowQualFinSF', 0.0002649908993817552),\n",
       " ('BsmtHalfBath', 0.00026374691771019606),\n",
       " ('BsmtFinSF2', 0.00026109434746192405),\n",
       " ('MiscVal', 0.0002571843178170174),\n",
       " ('MoSold_3', 0.00024643588218208566),\n",
       " ('LotConfig_CulDSac', 0.00023636343243177324),\n",
       " ('Exterior1st_MetalSd', 0.00023270896688156912),\n",
       " ('Electrical_FuseA', 0.00023080212933975405),\n",
       " ('MasVnrType_Stone', 0.00022243179064728824),\n",
       " ('Exterior1st_BrkFace', 0.00021641880918558772),\n",
       " ('Condition1_Feedr', 0.00021635291727274225),\n",
       " ('Fence_MnPrv', 0.00021096216926229516),\n",
       " ('MSSubClass_50', 0.00020879638013737435),\n",
       " ('Exterior2nd_MetalSd', 0.000204735412343536),\n",
       " ('Exterior1st_Plywood', 0.0001978414322408127),\n",
       " ('Fence_GdPrv', 0.00018437009210528732),\n",
       " ('LandSlope_Mod', 0.00018004242955300587),\n",
       " ('GarageType_Basment', 0.00017669466629278906),\n",
       " ('MoSold_2', 0.0001735089373051949),\n",
       " ('MoSold_9', 0.00016768827120325325),\n",
       " ('Exterior2nd_Plywood', 0.00016414898706598188),\n",
       " ('SaleCondition_Partial', 0.000163153253518507),\n",
       " ('Exterior1st_BrkComm', 0.00016225345911314557),\n",
       " ('Exterior2nd_BrkFace', 0.00015711262791116436),\n",
       " ('Exterior2nd_Stucco', 0.00015226934920626424),\n",
       " ('MSSubClass_70', 0.00014509874479250287),\n",
       " ('SaleCondition_Alloca', 0.00014217403014461178),\n",
       " ('Exterior2nd_HdBoard', 0.00014039954598359412),\n",
       " ('Exterior1st_HdBoard', 0.0001390627205285334),\n",
       " ('RoofMatl_WdShngl', 0.0001348097483799207),\n",
       " ('Exterior2nd_CmentBd', 0.00013164825990207263),\n",
       " ('LotConfig_FR2', 0.00012869770599919643),\n",
       " ('Exterior1st_CemntBd', 0.00012251760880900255),\n",
       " ('MSSubClass_80', 0.00011843680349851835),\n",
       " ('GarageType_NA', 0.00011624342326872605),\n",
       " ('SaleType_ConLD', 0.00010372607687356424),\n",
       " ('RoofStyle_Flat', 0.00010039133373776756),\n",
       " ('SaleType_New', 9.609504608528585e-05),\n",
       " ('MSZoning_RH', 9.368939446441601e-05),\n",
       " ('PoolQC', 9.144302180324454e-05),\n",
       " ('RoofMatl_Tar&Grv', 8.857264401357316e-05),\n",
       " ('Electrical_FuseF', 8.724236275082335e-05),\n",
       " ('SaleType_COD', 8.578015789152422e-05),\n",
       " ('Condition1_RRAe', 8.544363116073952e-05),\n",
       " ('GarageType_BuiltIn', 7.851849188004976e-05),\n",
       " ('MiscFeature_Shed', 6.890593378943233e-05),\n",
       " ('MSSubClass_120', 6.379895760429553e-05),\n",
       " ('GarageType_CarPort', 6.197141368363046e-05),\n",
       " ('3SsnPorch', 6.013967222864799e-05),\n",
       " ('LandSlope_Sev', 5.9777027266897874e-05),\n",
       " ('Condition1_PosN', 5.890899275367208e-05),\n",
       " ('HasGarage', 5.613521687013448e-05),\n",
       " ('MSSubClass_75', 5.55452626861129e-05),\n",
       " ('Street_Grvl', 5.51106041908032e-05),\n",
       " ('Exterior2nd_AsbShng', 5.3648403495522386e-05),\n",
       " ('MasVnrType_BrkCmn', 5.340941375353069e-05),\n",
       " ('Exterior2nd_Brk Cmn', 5.2889093189563354e-05),\n",
       " ('Exterior1st_AsbShng', 5.0091462610773235e-05),\n",
       " ('Condition2_PosN', 4.9726981613530156e-05),\n",
       " ('MSZoning_FV', 4.893116495377981e-05),\n",
       " ('Exterior1st_WdShing', 4.8682532991706074e-05),\n",
       " ('MSSubClass_160', 4.612478768354422e-05),\n",
       " ('Electrical_Mix', 3.951175805369841e-05),\n",
       " ('MSSubClass_40', 3.813722407773266e-05),\n",
       " ('BldgType_2fmCon', 3.6226460452321686e-05),\n",
       " ('Heating_GasW', 3.5713247932523445e-05),\n",
       " ('SaleType_Oth', 2.761174820602564e-05),\n",
       " ('MSSubClass_190', 2.6328055608230083e-05),\n",
       " ('BldgType_Twnhs', 2.516564022131292e-05),\n",
       " ('Exterior1st_Stucco', 2.504760774907659e-05),\n",
       " ('BldgType_TwnhsE', 2.1639508532158854e-05),\n",
       " ('PoolArea', 2.1162178492851103e-05),\n",
       " ('Condition2_RRNn', 2.0384754713675395e-05),\n",
       " ('Foundation_Slab', 1.9985999962708e-05),\n",
       " ('Condition1_RRAn', 1.9210152685357017e-05),\n",
       " ('Utilities', 1.8118368066842143e-05),\n",
       " ('Exterior1st_AsphShn', 1.7750563958807325e-05),\n",
       " ('Exterior2nd_ImStucc', 1.7519261206770446e-05),\n",
       " ('RoofStyle_Gambrel', 1.5749269750348646e-05),\n",
       " ('SaleType_ConLw', 1.3156587549567343e-05),\n",
       " ('Exterior2nd_AsphShn', 1.0732161433952321e-05),\n",
       " ('Condition2_Feedr', 1.0176355213786244e-05),\n",
       " ('MiscFeature_Othr', 9.856172344779708e-06),\n",
       " ('MSSubClass_45', 9.126529871413533e-06),\n",
       " ('RoofStyle_Mansard', 9.007893785220323e-06),\n",
       " ('SaleType_CWD', 8.981211620483035e-06),\n",
       " ('LotConfig_FR3', 6.520356869401279e-06),\n",
       " ('MSSubClass_85', 5.79115079707315e-06),\n",
       " ('Condition1_PosA', 5.265167815347074e-06),\n",
       " ('SaleType_ConLI', 5.180246653919108e-06),\n",
       " ('Exterior2nd_Stone', 4.791229406707753e-06),\n",
       " ('Condition2_RRAn', 4.5810035693553375e-06),\n",
       " ('SaleCondition_AdjLand', 3.3840511963606975e-06),\n",
       " ('Fence_MnWw', 3.020743125399796e-06),\n",
       " ('MiscFeature_TenC', 2.7683322400226864e-06),\n",
       " ('SaleType_Con', 2.716617570538142e-06),\n",
       " ('Condition2_PosA', 2.6722542955952894e-06),\n",
       " ('Electrical_FuseP', 2.6539836397132513e-06),\n",
       " ('Exterior2nd_Other', 1.8864017627002767e-06),\n",
       " ('Heating_Floor', 1.7852417150978938e-06),\n",
       " ('Foundation_Stone', 1.469161341397026e-06),\n",
       " ('MiscFeature_Gar2', 1.4202429229582448e-06),\n",
       " ('RoofMatl_WdShake', 1.2800123087505322e-06),\n",
       " ('Heating_Wall', 1.1091589568426983e-06),\n",
       " ('Foundation_Wood', 8.405864112970542e-07),\n",
       " ('Heating_OthW', 8.321296042518399e-07),\n",
       " ('MSSubClass_180', 6.45276140326491e-07),\n",
       " ('Exterior1st_Stone', 5.477839961275879e-07),\n",
       " ('Condition1_RRNn', 5.269364419087572e-07),\n",
       " ('GarageType_2Types', 5.14471125475885e-07),\n",
       " ('Condition1_RRNe', 2.120194261925058e-07),\n",
       " ('Exterior2nd_CBlock', 3.618510432350522e-08),\n",
       " ('RoofMatl_Roll', 3.490465521499053e-08),\n",
       " ('RoofMatl_Metal', 1.488253930510914e-08),\n",
       " ('Exterior1st_CBlock', 1.3386780108458112e-08),\n",
       " ('Condition2_RRAe', 4.778335079173294e-09),\n",
       " ('RoofStyle_Shed', 0.0),\n",
       " ('Exterior1st_ImStucc', 0.0),\n",
       " ('Condition2_Artery', 0.0),\n",
       " ('RoofMatl_ClyTile', 0.0),\n",
       " ('RoofMatl_Membran', 0.0)]"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get most important features\n",
    "# tree_final = grid_search_forest.best_estimator_\n",
    "tree_final = grid_search_forest2.best_estimator_\n",
    "feature_importance = tree_final.feature_importances_\n",
    "feature_importance = list(zip(Ames_train_final.columns, feature_importance))\n",
    "\n",
    "feature_importance.sort(key = lambda x: x[1], reverse = True)\n",
    "feature_importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "col, imp = zip(*feature_importance)\n",
    "\n",
    "cols_to_use = list(col[0:31])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 1s, sys: 1.08 s, total: 1min 2s\n",
      "Wall time: 1min 3s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score=nan,\n",
       "             estimator=RandomForestRegressor(bootstrap=True, ccp_alpha=0.0,\n",
       "                                             criterion='mse', max_depth=None,\n",
       "                                             max_features='auto',\n",
       "                                             max_leaf_nodes=None,\n",
       "                                             max_samples=None,\n",
       "                                             min_impurity_decrease=0.0,\n",
       "                                             min_impurity_split=None,\n",
       "                                             min_samples_leaf=1,\n",
       "                                             min_samples_split=2,\n",
       "                                             min_weight_fraction_leaf=0.0,\n",
       "                                             n_estimators=100, n_jobs=None,\n",
       "                                             oob_score=False, random_state=None,\n",
       "                                             verbose=0, warm_start=False),\n",
       "             iid='deprecated', n_jobs=None,\n",
       "             param_grid={'max_depth': [25, 30, 35, 40],\n",
       "                         'n_estimators': range(80, 110, 10)},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
       "             scoring=None, verbose=0)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# cols_to_use = ['Overall_Qual', 'GLA_x_NR', 'Garage_Area', 'Total_Bsmt_SF', '1st_Flr_SF', 'Garage_Cars', 'Overall_Cond', 'Bsmt_Qual', 'BsmtFin_SF_1']\n",
    "\n",
    "# set the parameter grid\n",
    "grid_para_forest = {\n",
    "    'max_depth': [25, 30, 35, 40],\n",
    "    'n_estimators': range(80, 110, 10)\n",
    "}\n",
    "\n",
    "gsf_limited_col = GridSearchCV(randomForest, grid_para_forest, cv=5)\n",
    "%time gsf_limited_col.fit(Ames_train_final[cols_to_use], Ames_target_train_final)\n",
    "# Took 52s last run\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'max_depth': 40, 'n_estimators': 100}\n",
      "0.8852885696722529\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[('OQ_x_NR', 0.4620993053021143),\n",
       " ('OQ_x_TR', 0.2410856845916325),\n",
       " ('GrLivArea', 0.07874015242337751),\n",
       " ('TotalBsmtSF', 0.032136999969752854),\n",
       " ('1stFlrSF', 0.020555374832949322),\n",
       " ('BsmtFinSF1', 0.019086190092394376),\n",
       " ('GarageArea', 0.015596916673025549),\n",
       " ('LotArea', 0.014615849229857007),\n",
       " ('OverallCond', 0.009956569531527766),\n",
       " ('CentralAir', 0.009333221902579288),\n",
       " ('YearRemodAdd', 0.008526261204933164),\n",
       " ('OpenPorchSF', 0.007554783747343803),\n",
       " ('GarageCars', 0.007501668414295194),\n",
       " ('FireplaceQu', 0.0074108907151658986),\n",
       " ('YearBuilt', 0.007032844578192885),\n",
       " ('BsmtUnfSF', 0.006497162935316699),\n",
       " ('GarageYrBlt', 0.006206814401210236),\n",
       " ('LotFrontage', 0.006167639914122041),\n",
       " ('2ndFlrSF', 0.005628203008822602),\n",
       " ('WoodDeckSF', 0.004995722697869562),\n",
       " ('BsmtFinType1', 0.004091270197100115),\n",
       " ('KitchenQual', 0.0035885374445795205),\n",
       " ('MSZoning_C (all)', 0.0033653572198858593),\n",
       " ('MasVnrArea', 0.003016920897015973),\n",
       " ('EnclosedPorch', 0.002768427957728201),\n",
       " ('GarageFinish', 0.0024672734655962225),\n",
       " ('ExterCond', 0.002387572097860196),\n",
       " ('GarageQual', 0.002363897598801864),\n",
       " ('HeatingQC', 0.0019205639267194045),\n",
       " ('SaleCondition_Abnorml', 0.001708181057915336),\n",
       " ('PavedDrive', 0.0015937419703147358)]"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(gsf_limited_col.best_params_)\n",
    "print(gsf_limited_col.best_score_)\n",
    "\n",
    "tree_final = gsf_limited_col.best_estimator_\n",
    "feature_importance = tree_final.feature_importances_\n",
    "feature_importance = list(zip(cols_to_use, feature_importance))\n",
    "\n",
    "feature_importance.sort(key = lambda x: x[1], reverse = True)\n",
    "feature_importance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generate Test Predictions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save Random Forest Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([139109.95005717, 152214.30543442, 189873.94305467, ...,\n",
       "       145177.44710615, 121963.04460941, 265098.72666944])"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.exp(tree_final.predict(Ames_test_final[cols_to_use]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>139109.950057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>152214.305434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>189873.943055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>218728.476987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>223698.788046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1454</th>\n",
       "      <td>2915</td>\n",
       "      <td>96292.113188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>2916</td>\n",
       "      <td>101954.890505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>2917</td>\n",
       "      <td>145177.447106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>2918</td>\n",
       "      <td>121963.044609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>2919</td>\n",
       "      <td>265098.726669</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1459 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id      SalePrice\n",
       "0     1461  139109.950057\n",
       "1     1462  152214.305434\n",
       "2     1463  189873.943055\n",
       "3     1464  218728.476987\n",
       "4     1465  223698.788046\n",
       "...    ...            ...\n",
       "1454  2915   96292.113188\n",
       "1455  2916  101954.890505\n",
       "1456  2917  145177.447106\n",
       "1457  2918  121963.044609\n",
       "1458  2919  265098.726669\n",
       "\n",
       "[1459 rows x 2 columns]"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "answers = pd.DataFrame(list(zip(Ames_test_final.index, np.exp(tree_final.predict(Ames_test_final[cols_to_use])))))\n",
    "\n",
    "# answers.set_index(0, inplace = True)\n",
    "\n",
    "answers.columns = ['Id', 'SalePrice']\n",
    "\n",
    "answers\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "answers.to_csv(r'../../NYCDSA/Project 3 - Machine Learning/data/submission_rf.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save ElasticNet Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler.fit(Ames_test_final)\n",
    "Ames_test_final_standardized = scaler.transform(Ames_test_final)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([125417.74047287, 165810.08547383, 181295.17362675, ...,\n",
       "       193109.52865673, 116776.62511868, 218424.56362729])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ln_price = best_model.predict(Ames_test_final_standardized)\n",
    "\n",
    "np.exp(ln_price)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>125417.740473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>165810.085474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>181295.173627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>201297.547843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>196309.207527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1454</th>\n",
       "      <td>2915</td>\n",
       "      <td>77452.429595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>2916</td>\n",
       "      <td>76997.413270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>2917</td>\n",
       "      <td>193109.528657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>2918</td>\n",
       "      <td>116776.625119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>2919</td>\n",
       "      <td>218424.563627</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1459 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id      SalePrice\n",
       "0     1461  125417.740473\n",
       "1     1462  165810.085474\n",
       "2     1463  181295.173627\n",
       "3     1464  201297.547843\n",
       "4     1465  196309.207527\n",
       "...    ...            ...\n",
       "1454  2915   77452.429595\n",
       "1455  2916   76997.413270\n",
       "1456  2917  193109.528657\n",
       "1457  2918  116776.625119\n",
       "1458  2919  218424.563627\n",
       "\n",
       "[1459 rows x 2 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "answers_en = pd.DataFrame(list(zip(Ames_test_final.index, np.exp(ln_price))))\n",
    "\n",
    "answers_en.columns = ['Id', 'SalePrice']\n",
    "\n",
    "answers_en\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-385572.34435589536\n",
      "169640.23155678425\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>13692.209584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>-13595.780039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>8578.769428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>17430.929144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>27389.580520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1454</th>\n",
       "      <td>0</td>\n",
       "      <td>18839.683593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>0</td>\n",
       "      <td>24957.477234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>0</td>\n",
       "      <td>-47932.081551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>0</td>\n",
       "      <td>5186.419491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>0</td>\n",
       "      <td>46674.163042</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1459 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Id     SalePrice\n",
       "0      0  13692.209584\n",
       "1      0 -13595.780039\n",
       "2      0   8578.769428\n",
       "3      0  17430.929144\n",
       "4      0  27389.580520\n",
       "...   ..           ...\n",
       "1454   0  18839.683593\n",
       "1455   0  24957.477234\n",
       "1456   0 -47932.081551\n",
       "1457   0   5186.419491\n",
       "1458   0  46674.163042\n",
       "\n",
       "[1459 rows x 2 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(min(answers['SalePrice'] - answers_en['SalePrice']))\n",
    "print(max(answers['SalePrice'] - answers_en['SalePrice']))\n",
    "\n",
    "answers - answers_en"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12596022.823472347"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(answers['SalePrice'] - answers_en['SalePrice'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "answers_en.to_csv(r'../../NYCDSA/Project 3 - Machine Learning/data/submission_en.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    430\n",
       "6.0    418\n",
       "5.0    220\n",
       "4.0    148\n",
       "3.0    133\n",
       "2.0     74\n",
       "0.0     37\n",
       "Name: BsmtFinType1, dtype: int64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Ames_train_final['BsmtFinType1'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6.0    431\n",
       "1.0    421\n",
       "5.0    209\n",
       "3.0    155\n",
       "4.0    121\n",
       "2.0     80\n",
       "0.0     42\n",
       "Name: BsmtFinType1, dtype: int64"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Ames_test_final['BsmtFinType1'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.208270    430\n",
       " 1.164712    418\n",
       " 0.690115    220\n",
       " 0.215519    148\n",
       "-0.259078    133\n",
       "-0.733674     74\n",
       "-1.682867     37\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vals = Ames_train_final['BsmtFinType1']\n",
    "val_reshape = np.array(vals).reshape(-1, 1)\n",
    "\n",
    "tst = StandardScaler()\n",
    "tst.fit(val_reshape)\n",
    "tst_transform = tst.transform(val_reshape)\n",
    "\n",
    "val_counts = pd.DataFrame(tst_transform)[0].value_counts()\n",
    "\n",
    "val_counts.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GLQ : 168383.7907695215\n",
      "ALQ : 167702.45795595553\n",
      "BLQ : 167023.8834522429\n",
      "xx  : 166716.64288689764\n",
      "Rec : 166348.05324361555\n",
      "LwQ : 165674.95906807884\n",
      "Unf : 165004.58843369762\n",
      "Na  : 164336.92891626398\n"
     ]
    }
   ],
   "source": [
    "it = best_model.intercept_\n",
    "cf = lassoCoef['BsmtFinType1']\n",
    "\n",
    "print('GLQ : ' + str(np.exp(it + cf * 1.164712)))\n",
    "print('ALQ : ' + str(np.exp(it + cf * 0.690115)))\n",
    "print('BLQ : ' + str(np.exp(it + cf * 0.215519)))\n",
    "print('xx  : ' + str(np.exp(it)))\n",
    "print('Rec : ' + str(np.exp(it + cf * -0.259078)))\n",
    "print('LwQ : ' + str(np.exp(it + cf * -0.733674)))\n",
    "print('Unf : ' + str(np.exp(it + cf * -1.208270)))\n",
    "print('Na  : ' + str(np.exp(it + cf * -1.682867)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mean       84.731343\n",
       "min         4.000000\n",
       "max       547.000000\n",
       "median     63.000000\n",
       "Name: OpenPorchSF, dtype: float64"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kr_train[kr_train['OpenPorchSF'] > 0]['OpenPorchSF'].agg(['mean', 'min', 'max', 'median'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(Ames_train_final['BsmtFinType1'] < Ames_train_final['BsmtFinType2'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    1256\n",
       "3.0      54\n",
       "2.0      46\n",
       "0.0      38\n",
       "4.0      33\n",
       "5.0      19\n",
       "6.0      14\n",
       "Name: BsmtFinType2, dtype: int64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Ames_train_final['BsmtFinType2'].value_counts()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
